//Generated by wsdl2apex

public class CofaceWebservice {
    public static final String CREDIT_SYSTEM_NAME = 'Coface';

    /*******************************************************************************
    *  Name            : generateSearchRequest()
    *  Summary         : Generate HTTP Request to CreditReform
    *  CreatedDate     : 20/02/2018
    *  ModifiedDate    : 
    *  Parameters      : String endpoint - from CreditSystem custom setting, String userName - from CreditSystem custom setting, 
                         String password - from CreditSystem custom setting, String recordName - company name for search, 
                         String recordCountry - company country for search, String recordZip - company postal code for search, 
                         String recordCity - company city for search, String vatNumber - company Vat Number
    *  Returns         : HttpRequest
    ******************************************************************************/
    public static HttpRequest generateSearchRequest(String endpoint, String userName, String password,
                                                    String recordName,
                                                    String recordCountry,
                                                    String recordZip, 
                                                    String recordCity,
                                                    String vatNumber) {
        try {
            String body = generateSearchXML(userName, password, recordName, recordCountry, recordZip, recordCity, vatNumber);
            Http h = new Http();
            HttpRequest request = new HttpRequest();
            request.setHeader('SOAPAction', '');
            if (vatNumber != null) {
                request.setHeader('SOAPAction', 'http://www.iconx.biz/webservices/searchByIdentifier');
            } else {
                request.setHeader('SOAPAction', 'http://www.iconx.biz/webservices/searchByNameAndAddress');
            }
            request.setHeader('Content-Type', 'text/xml;charset=UTF-8');
            request.setBody(body);
            request.setTimeout(30000);
            // url that returns the XML in the response body
            request.setEndpoint(endpoint);
            request.setMethod('POST');

            return request;
        } catch (Exception e) {
            System.debug('Credit Factory Error === ' + e.getMessage());
            throw new CreditFactoryException('Search request failed. ' + CreditFactoryUtilities.CONTACT_ADMIN);
        }
    }


    /*******************************************************************************
    *  Name            : returnSearchCompany(Dom.XMLNode node)
    *  Summary         : Return Body DOM element
    *  CreatedDate     : 20/02/2018
    *  Parameters      : node - body from response
    *  Returns         : Dom.XMLNode
    ******************************************************************************/
    public static List<CreditCompany> returnSearchCompany(Dom.XMLNode node) {
        try {
            List<CreditCompany> companiesFromSearch = new List<CreditCompany>();
            for (Dom.XMLNode searchResponse : node.getChildElements()) {
                if (searchResponse.getName() == 'searchByNameAndAddressResponse' ||
                    searchResponse.getName() == 'searchByIdentifierResponse') {
                    for (Dom.XMLNode globalSearchResult : searchResponse.getChildElements()) {
                        if (globalSearchResult.getName() == 'searchByNameAndAddressResult' ||
                            globalSearchResult.getName() == 'searchByIdentifierResult') {
                            for (Dom.XMLNode SearchResults : globalSearchResult.getChildElements()) {
                                if (SearchResults.getName() == 'SearchResults') {
                                    for (Dom.XMLNode SearchResult : SearchResults.getChildElements()) {
                                        if (SearchResult.getName() == 'SearchResult') {
                                            // SEARCH COMPANY
                                            CreditCompany company = new CreditCompany();
                                            company.isReportExists = true;
                                            for (Dom.XMLNode SearchResultField : SearchResult.getChildElements()) {
                                                if (SearchResultField.getName() == 'Name') {
                                                    company.name = SearchResultField.getText();
                                                }

                                                if (SearchResultField.getName() == 'InternalID') {
                                                    company.creditSystemCompanyNumber = SearchResultField.getText();
                                                    company.identificationnumber = SearchResultField.getText();
                                                }

                                                if (SearchResultField.getName() == 'SortName') {
                                                    company.tradename = SearchResultField.getText();
                                                }

                                                if (SearchResultField.getName() == 'Address') {
                                                    for (Dom.XMLNode address : SearchResultField.getChildElements()) {
                                                        company.street = '';

                                                        if (address.getName() == 'AddressItem1') {
                                                            company.street = address.getText();
                                                        }
                                                        if (address.getName() == 'AddressItem2') {
                                                            company.street = company.street + '\n' + address.getText();
                                                        }
                                                        if (address.getName() == 'City') {
                                                            company.city = address.getText();    
                                                        }
                                                        if (address.getName() == 'ZipCode') {
                                                            company.postcode = address.getText();    
                                                        }
                                                    }
                                                }
                                            }

                                            companiesFromSearch.add(company);
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }

            return companiesFromSearch;
        } catch (Exception e) {
            system.debug('Credit Factory Error === ' + e.getMessage());
            throw new CreditFactoryException('Parsing Search Company failed. ' + CreditFactoryUtilities.CONTACT_ADMIN);
        }
    }


    /*******************************************************************************
    *  Name            : generateSearchXML(endpoint, userName, password, recordName, recordCountry, recordZip, recordCity, vatNumber)
    *  Summary         : Generate XML String to call CreditReform search. If "Vat Number" is not empty â€“ use it for request.
    *  CreatedDate     : 20/02/2018
    *  ModifiedDate    : 02/04/2019
    *  Parameters      : String userName - from CreditSystem custom setting
                         String password - from CreditSystem custom setting
                         String recordName - company name for search
                         String recordCountry - billing company from account
                         String recordZip - billing zip code from account
                         String recordCity - billing city code from account
                         String vatNumber - Vat Number from account

    *  Return         : String (XML)
    ******************************************************************************/
    public static String generateSearchXML(
                                            String userName, 
                                            String password, 
                                            String recordName, 
                                            String recordCountry, 
                                            String recordZip, 
                                            String recordCity, 
                                            String taxId) {
        String xmlbody = '<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:web="http://www.iconx.biz/webservices">' +
            '<soapenv:Header>' +
                '<web:AuthHeader>' +
                    '<web:Username>' + userName + '</web:Username>' +
                    '<web:Password>' + password + '</web:Password>' + 
                '</web:AuthHeader>' +
           '</soapenv:Header>' +
           '<soapenv:Body>' +
                (taxId == null 
                ? 
                '<web:searchByNameAndAddress>' +
                    '<web:Name>' + recordName.replace('&', ' ') + '</web:Name>' +
                    '<web:Country>' + recordCountry + '</web:Country>' + 
                    ((recordZip != null) ? '<web:ZipCode>' + recordZip + '</web:ZipCode>' : '') +
                    ((recordCity != null) ? '<web:City>' + recordCity + '</web:City>' : '') +
                    '<web:MaxResults>100</web:MaxResults>' +
                '</web:searchByNameAndAddress>'
                :
                '<web:searchByIdentifier>' +
                    '<web:Country>' + recordCountry + '</web:Country>' +
                    '<web:Identifier>' + taxId + '</web:Identifier>' +
                    '<web:TypeOfIdentifier>120</web:TypeOfIdentifier>' +
                    '<web:MaxResults>100</web:MaxResults>' +
                '</web:searchByIdentifier>') +
            '</soapenv:Body>' +
        '</soapenv:Envelope>';

        return xmlbody;
    }


    /*******************************************************************************
    *  Name            : isCofaceReportProductAvailable(Dom.XMLNode globalBody)
    *  Summary         : Parse response and check if report 9997 exist     
    *  CreatedDate     : 21/02/2018
    *  ModifiedDate    : 
    *  Parameters      : 
    *  Returns         : Boolean â€“ is 9997 product exist or not
    ******************************************************************************/
    public static Boolean isCofaceReportProductAvailable(Dom.XMLNode globalBody) {
        for (Dom.XMLNode getCompanyDetailsResponse : globalBody.getChildElements()) {
            if (getCompanyDetailsResponse.getName() == 'getCompanyDetailsResponse') {
                for (Dom.XMLNode getCompanyDetailsResult : getCompanyDetailsResponse.getChildElements()) {
                    if (getCompanyDetailsResult.getName() == 'getCompanyDetailsResult') {
                        for (Dom.XMLNode result : getCompanyDetailsResult.getChildElements()) {
                            if (result.getName() == 'ResponseCode' && result.getText() == 'NotFound') {
                                return false;
                            }

                            if (result.getName() == 'CompanyDetails') {
                                for (Dom.XMLNode AvailableProducts : result.getChildElements()) {
                                    if (AvailableProducts.getName() == 'AvailableProducts') {
                                        for (Dom.XMLNode product : AvailableProducts.getChildElements()) {
                                            if (product.getName() == 'Product') {
                                                for (Dom.XMLNode productInfo : product.getChildElements()) {
                                                    if (productInfo.getName() == 'Code' && 
                                                        productInfo.getText() == '9997' &&
                                                        product.getChildElements().size() == 3 &&
                                                        product.getChildElements().get(1).getText() == 'COFACE SELECT PREMIUM' &&
                                                        product.getChildElements().get(2).getText() == 'AvailableImmediately') {
                                                        return true;
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }

        return false;
    }


    /*******************************************************************************
    *  Name            : checkExistingCompanies(Dom.XMLNode globalBody)
    *  Summary         : Check if companies exist in response     
    *  CreatedDate     : 20/02/2018
    *  ModifiedDate    : 
    *  Parameters      : globalBody â€“ body from response
    *  Returns         : Boolean â€“ true if companies are exist, false if not
    ******************************************************************************/
    public static Boolean checkExistingCompanies(Dom.XMLNode globalBody) {
        for (Dom.XMLNode search : globalBody.getChildElements()) {
            if (search.getName() == 'searchByNameAndAddressResponse' || search.getName() == 'searchByIdentifierResponse') {
                for (Dom.XMLNode result : search.getChildElements()) {
                    if (result.getName() == 'searchByNameAndAddressResult' || result.getName() == 'searchByIdentifierResult') {
                        for (Dom.XMLNode innerResponse : result.getChildElements()) {
                            if (innerResponse.getName() == 'ResponseCode' && innerResponse.getText() == 'NotFound') {
                                return false;
                            }
                        }
                    }
                }
            }
        }
        return true;
    }


    /*******************************************************************************
    *  Name            : generateRequestForCheckAvailability(CreditSystem creditSystem, String companyId)
    *  Summary         : Generate HTTP request for Coface method getCompanyDetails     
    *  CreatedDate     : 20/02/2018
    *  ModifiedDate    : 08/01/2018
    *  Parameters      : String endpoint - Coface endpoint url, String userName - Coface account name, 
                         String password - Coface password, String companyId - parameter value from search page
    *  Returns         : HttpRequest
    ******************************************************************************/
    public static HttpRequest generateRequestForCheckAvailability(String endpoint, String userName, String password, String companyId) {
        HttpRequest request = new HttpRequest();
        String xmlBody = '<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:web="http://www.iconx.biz/webservices">' +
            '<soapenv:Header>' +
                '<web:AuthHeader>' + 
                    '<web:Username>' + userName + '</web:Username>' +
                    '<web:Password>' + password + '</web:Password>' + 
                '</web:AuthHeader>' +
            '</soapenv:Header>' + 
            '<soapenv:Body>' + 
                '<web:getCompanyDetails>' +
                    '<web:InternalID>' + companyId + '</web:InternalID>' +
                '</web:getCompanyDetails>' +
            '</soapenv:Body>' +
        '</soapenv:Envelope>';
        request.setBody(xmlBody);
        request.setHeader('Content-Type', 'text/xml;charset=UTF-8');
        request.setTimeout(30000);
        request.setEndpoint(endpoint);
        request.setHeader('SOAPAction', 'http://www.iconx.biz/webservices/getCompanyDetails');
        request.setMethod('POST');

        return request;
    }


    /*******************************************************************************
    *  Name            : returnGlobalBody(Dom.XMLNode node)
    *  Summary         : Return Body DOM element
    *  CreatedDate     : 20/02/2018
    *  Parameters      : node - body from response
    *  Returns         : Dom.XMLNode
    ******************************************************************************/
    public static Dom.XMLNode returnGlobalBody(Dom.XMLNode node) {
        for (Dom.XMLNode child : node.getChildElements()) {
            if (child.getName() == 'Body') {
                return child;
            }
        }
        return null;
    }


    /*******************************************************************************
    *  Name            : getBinaryAttachment(String xmlBody)
    *  Summary         : Return PDF report in Blob     
    *  CreatedDate     : 21/02/2018
    *  ModifiedDate    : 
    *  Parameters      : xmlBody â€“ XML body from PDF response
    *  Returns         : Blob â€“ PDF file
    ******************************************************************************/
    public static Blob getBinaryAttachment(String xmlBody) {
        Dom.Document domDoc = new Dom.Document();
        domDoc.load(xmlBody);
        Dom.XMLNode xmldom = domDoc.getRootElement();
        Dom.XMLNode globalBody = returnGlobalBody(xmldom);
        for (Dom.XMLNode immediateOrderResponse : globalBody.getChildElements()) {
            if (immediateOrderResponse.getName() == 'immediateOrderResponse') {
                for (Dom.XMLNode immediateOrderResult : immediateOrderResponse.getChildElements()) {
                    if (immediateOrderResult.getName() == 'immediateOrderResult') {
                        for (Dom.XMLNode immediateOrderResultItem : immediateOrderResult.getChildElements()) {
                            if (immediateOrderResultItem.getName() == 'Report') {
                                for (Dom.XMLNode reportData : immediateOrderResultItem.getChildElements()) {
                                    if (reportData.getName() == 'ReportBinary') {
                                        return EncodingUtil.base64Decode(reportData.getText());
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }

        return null;
    }


    /*******************************************************************************
    *  Name            : generatePdfReportRequest(String endpoint, String userName, String password, String apikey, String companyId)
    *  Summary         : Generate HTTP Request to Coface to get PDF report
    *  CreatedDate     : 03/11/2016
    *  Parameters      : endpoint - from CreditSystem custom setting ,userName - from CreditSystem custom setting, 
                         password - from CreditSystem custom setting, apikey - from CreditSystem custom setting, 
                         companyId - Id of Credit System Company (from finder page), String productCode - Coface product code
    *  Returns         : HttpRequest
    ******************************************************************************/
    public static HttpRequest generatePdfReportRequest(String endpoint, String userName, String password,
                                                    String companyId, String productCode) {
        try {
            String body = generatePdfReportXML(userName, password, companyId, productCode);
            Http h = new Http();
            HttpRequest request = new HttpRequest();
            request.setHeader('SOAPAction', 'http://www.iconx.biz/webservices/immediateOrder');
            request.setHeader('Content-Type', 'text/xml;charset=UTF-8');
            request.setBody(body);
            request.setTimeout(120000);
            request.setEndpoint(endpoint);
            request.setMethod('POST');

            return request;
        } catch (Exception e) {
            system.debug('Credit Factory Error === ' + e.getMessage());
            throw new CreditFactoryException('Report request failed. ' + CreditFactoryUtilities.CONTACT_ADMIN);
        }
    }


    /*******************************************************************************
    *  Name            : generatePdfReportXML(String userName, String password, String companyId)
    *  Summary         : Generate XML String to call Coface 9997 report
    *  CreatedDate     : 21/02/2018
    *  Parameters      : userName - from CreditSystem custom setting, 
                         password - from CreditSystem custom setting, 
                         companyId - Id of Credit System Company (from finder page),
                         String productCode - Coface product code
    *  Returns         : String
    ******************************************************************************/
    public static String generatePdfReportXML(String userName, String password, String companyId, String productCode) {
        String xmlbody = '<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:web="http://www.iconx.biz/webservices">' +
            '<soapenv:Header>' +
                '<web:AuthHeader>' +
                    '<web:Username>' + userName + '</web:Username>' +
                    '<web:Password>' + password + '</web:Password>' +
                '</web:AuthHeader>' +
            '</soapenv:Header>' +
            '<soapenv:Body>' +
                '<web:immediateOrder>' +
                    '<web:InternalID>' + companyId + '</web:InternalID>' +
                    '<web:ReportMimeType>application/pdf</web:ReportMimeType>' +
                    '<web:Language>EN</web:Language>' +
                    '<web:ProductCode>' + productCode + '</web:ProductCode>' +
                '</web:immediateOrder>' +
            '</soapenv:Body>' +
        '</soapenv:Envelope>';
        
        return xmlbody;
    }


    /*******************************************************************************
    *  Name            : generateReportRequest(String endpoint, String userName, String password, String apikey, String companyId)
    *  Summary         : Generate HTTP Request to Coface to get XML report
    *  CreatedDate     : 03/11/2016
    *  Parameters      : endpoint - from CreditSystem custom setting ,userName - from CreditSystem custom setting, 
                         password - from CreditSystem custom setting, apikey - from CreditSystem custom setting, 
                         companyId - Id of Credit System Company (from finder page)
    *  Returns         : HttpRequest
    ******************************************************************************/
    public static HttpRequest generateReportRequest(String endpoint, String userName, String password,
                                                    String companyId) {
        try {
            String body = generateReportXML(userName, password, companyId);
            Http h = new Http();
            HttpRequest request = new HttpRequest();
            request.setHeader('SOAPAction', 'http://www.iconx.biz/webservices/immediateOrder');
            request.setHeader('Content-Type', 'text/xml;charset=UTF-8');
            request.setBody(body);
            request.setTimeout(120000);
            request.setEndpoint(endpoint);
            request.setMethod('POST');

            return request;
        } catch (Exception e) {
            system.debug('Credit Factory Error === ' + e.getMessage());
            throw new CreditFactoryException('Report request failed. ' + CreditFactoryUtilities.CONTACT_ADMIN);
        }
    }


    /*******************************************************************************
    *  Name            : generateReportXML(String userName, String password, String companyId)
    *  Summary         : Generate XML String to call Coface 9997 report
    *  CreatedDate     : 21/02/2018
    *  Parameters      : userName - from CreditSystem custom setting, 
                         password - from CreditSystem custom setting, 
                         companyId - Id of Credit System Company (from finder page)
    *  Returns         : String
    ******************************************************************************/
    public static String generateReportXML(String userName, String password, String companyId) {
        String xmlbody = '<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:web="http://www.iconx.biz/webservices">' +
            '<soapenv:Header>' +
                '<web:AuthHeader>' +
                    '<web:Username>' + userName + '</web:Username>' +
                    '<web:Password>' + password + '</web:Password>' +
                '</web:AuthHeader>' +
            '</soapenv:Header>' +
            '<soapenv:Body>' +
                '<web:immediateOrder>' +
                    '<web:InternalID>' + companyId + '</web:InternalID>' +
                    '<web:ReportMimeType>text/xml</web:ReportMimeType>' +
                    '<web:Language>EN</web:Language>' +
                    '<web:ProductCode>9997</web:ProductCode>' +
                '</web:immediateOrder>' +
            '</soapenv:Body>' +
        '</soapenv:Envelope>';
        
        return xmlbody;
    }


    /*******************************************************************************
    *  Name            : checkResponseForFault(Dom.XMLNode node) 
    *  Summary         : If response is invalid â€“ display an error     
    *  CreatedDate     : 28/02/2018
    *  ModifiedDate    : 
    *  Parameters      : Dom.XMLNode node
    *  Returns         : Boolean â€“ true if is valid and false if not
    ******************************************************************************/
    public static Boolean checkResponseForFault(Dom.XMLNode node) {
        for (Dom.XMLNode fault : node.getChildElements()) {
            if (fault.getName() == 'Fault') {
                return false;
            }
        }

        return true;        
    }


    /*******************************************************************************
    *  Name            : returnReportCompany(Dom.XMLNode node)
    *  Summary         : Return Company
    *  CreatedDate     : 4/11/2016
    *  ModifiedDate    : 04/04/2019
    *  Parameters      : node - body from response
    *  Returns         : Dom.XMLNode
    ******************************************************************************/
    public static CreditCompany returnReportCompany(Dom.XMLNode node, String creditSystemCompanyNumber) {
        try {
            Dom.XMLNode xmlReport = CofaceWebservice.returnInnerXmlReport(node);
            CreditCompany selectedCompany = new CreditCompany();
            selectedCompany.creditSystemCompanyNumber = creditSystemCompanyNumber;
            selectedCompany.referencenumber = returnReferenceNumber(xmlReport);
            selectedCompany.classRating = returnRating(xmlReport);
            selectedCompany.turnOver = returnTurnOver(xmlReport);
            selectedCompany.legalform = returnLegalForm(xmlReport);
            String vatId = returnVatId(xmlReport);
            String taxNumber = returnTaxNumber(xmlReport);
            if (vatId != null) {
                selectedCompany.vatid = vatId;
            } else if (taxNumber != null) { // always shouldn't be null
                selectedCompany.vatid = 'HU' + taxNumber.substring(0, 8);
            }
            selectedCompany.taxnumber = taxnumber;
            selectedCompany.tradeRegisterNumber = returnRegisterId(xmlReport);
            selectedCompany.datelegalform = returnDateLegalForm(xmlReport);
            selectedCompany.registerNumber = returnRegisterId(xmlReport);
            selectedCompany.datelastregisterentry = returnDateLastRegisterEntry(xmlReport);
            selectedCompany.staffcompanyrange = returnStaffCompanyRange(xmlReport);
            selectedCompany.creditLimit = returnCreditLimit(xmlReport);
            selectedCompany.creditLimitCurrency = returnCreditLimitCurrency(xmlReport);
            selectedCompany.dateoffoundation = returnDateLegalForm(xmlReport);
            selectedCompany.status = returnStatus(xmlReport);
            selectedCompany.name = returnName(node);
            selectedCompany.tradename = returnTradeName(node);
            selectedCompany.street = returnStreet(xmlReport);
            selectedCompany.housenumber = returnHousenumber(xmlReport);
            selectedCompany.postcode = returnPostcode(xmlReport);
            selectedCompany.city = returnCity(xmlReport);
            selectedCompany.country = 'Hungary';
            selectedCompany.phone = returnPhone(xmlReport);
            selectedCompany.fax = returnFax(xmlReport);
            selectedCompany.email = returnEmail(xmlReport);
            selectedCompany.website = returnWebsite(xmlReport);
            if (selectedCompany.dateoffoundation != null) {
                if (selectedCompany.dateoffoundation.length() == 10) {
                    selectedCompany.ageofcompany = String.valueOf(Date.today().year() - Integer.valueOf(selectedCompany.dateoffoundation.substring(6,10)));
                } else if (selectedCompany.dateoffoundation.length() == 4) {
                    selectedCompany.ageofcompany = String.valueOf(Date.today().year() - Integer.valueOf(selectedCompany.dateoffoundation.substring(0,4)));
                }
            }
            selectedCompany.identificationnumber = creditSystemCompanyNumber;
            selectedCompany.dateOfLastMajorUpdate = returnDateOfLastMajorUpdate(xmlReport);
            selectedCompany.profitLossLastYear = returnProfitLossLastYear(xmlReport);
            selectedCompany.profitLossYearBeforeLast = returnProfitLossYearBeforeLast(xmlReport);
            selectedCompany.turnOverLastYear = returnTurnOverLastYear(xmlReport);
            selectedCompany.pitCurrency = 'HUF';
            return selectedCompany;
        } catch (Exception e) {
            system.debug('Credit Factory Error === ' + e.getMessage());
            throw new CreditFactoryException('Parsing Report Company failed. ' + CreditFactoryUtilities.CONTACT_ADMIN);
        }
    }


    public static Dom.XMLNode returnInnerXmlReport(Dom.XMLNode node) {
        for (Dom.XMLNode immediateOrderResponse : node.getChildElements()) {
            if (immediateOrderResponse.getName() == 'immediateOrderResponse' || immediateOrderResponse.getName() == 'getCompanyReportResponse') {
                for (Dom.XMLNode immediateOrderResult : immediateOrderResponse.getChildElements()) {
                    if (immediateOrderResult.getName() == 'immediateOrderResult' || immediateOrderResult.getName() == 'getCompanyReportResult') {
                        for (Dom.XMLNode orderInner : immediateOrderResult.getChildElements()) {
                            if (orderInner.getName() == 'Report') {
                                for (Dom.XMLNode reportInner : orderInner.getChildElements()) {
                                    if (reportInner.getName() == 'ReportXML') {
                                        return reportInner;
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }

        return null;
    }


    public static String returnStreet(Dom.XMLNode node) {
        for (Dom.XMLNode ICON : node.getChildElements()) {
            if (ICON.getName() == 'ICON') {
                for (Dom.XMLNode CREDITREPORT : ICON.getChildElements()) {
                    if (CREDITREPORT.getName() == 'CREDITREPORT') {
                        for (Dom.XMLNode COMPANY : CREDITREPORT.getChildElements()) {
                            if (COMPANY.getName() == 'COMPANY') {
                                for (Dom.XMLNode ADDRESSES : COMPANY.getChildElements()) {
                                    if (ADDRESSES.getName() == 'ADDRESSES') {
                                        for (Dom.XMLNode ADDRESS : ADDRESSES.getChildElements()) {
                                            if (ADDRESS.getName() == 'ADDRESS') {
                                                for (Dom.XMLNode ADDRESSITEM : ADDRESS.getChildElements()) {
                                                    if (ADDRESSITEM.getName() == 'ADDRESSTYPE' && ADDRESSITEM.getText() != 'Principal Address') {
                                                       break;
                                                    } else if (ADDRESSITEM.getName() == 'ADDRESSTYPE' && ADDRESSITEM.getText() == 'Principal Address') {
                                                        continue;
                                                    }

                                                    if (ADDRESSITEM.getName() == 'STREET') {
                                                        return ADDRESSITEM.getText();
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }                                 
                            }
                        }
                    }
                }
            }
        }

        return null; 
    }


    public static String returnHousenumber(Dom.XMLNode node) {
        for (Dom.XMLNode ICON : node.getChildElements()) {
            if (ICON.getName() == 'ICON') {
                for (Dom.XMLNode CREDITREPORT : ICON.getChildElements()) {
                    if (CREDITREPORT.getName() == 'CREDITREPORT') {
                        for (Dom.XMLNode COMPANY : CREDITREPORT.getChildElements()) {
                            if (COMPANY.getName() == 'COMPANY') {
                                for (Dom.XMLNode ADDRESSES : COMPANY.getChildElements()) {
                                    if (ADDRESSES.getName() == 'ADDRESSES') {
                                        for (Dom.XMLNode ADDRESS : ADDRESSES.getChildElements()) {
                                            if (ADDRESS.getName() == 'ADDRESS') {
                                                for (Dom.XMLNode ADDRESSITEM : ADDRESS.getChildElements()) {
                                                    if (ADDRESSITEM.getName() == 'ADDRESSTYPE' && ADDRESSITEM.getText() != 'Principal Address') {
                                                       break;
                                                    } else if (ADDRESSITEM.getName() == 'ADDRESSTYPE' && ADDRESSITEM.getText() == 'Principal Address') {
                                                        continue;
                                                    }

                                                    if (ADDRESSITEM.getName() == 'HOUSENUMBER') {
                                                        return ADDRESSITEM.getText();
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }                                 
                            }
                        }
                    }
                }
            }
        }

        return null; 
    }


    public static String returnPostcode(Dom.XMLNode node) {
        for (Dom.XMLNode ICON : node.getChildElements()) {
            if (ICON.getName() == 'ICON') {
                for (Dom.XMLNode CREDITREPORT : ICON.getChildElements()) {
                    if (CREDITREPORT.getName() == 'CREDITREPORT') {
                        for (Dom.XMLNode COMPANY : CREDITREPORT.getChildElements()) {
                            if (COMPANY.getName() == 'COMPANY') {
                                for (Dom.XMLNode ADDRESSES : COMPANY.getChildElements()) {
                                    if (ADDRESSES.getName() == 'ADDRESSES') {
                                        for (Dom.XMLNode ADDRESS : ADDRESSES.getChildElements()) {
                                            if (ADDRESS.getName() == 'ADDRESS') {
                                                for (Dom.XMLNode ADDRESSITEM : ADDRESS.getChildElements()) {
                                                    if (ADDRESSITEM.getName() == 'ADDRESSTYPE' && ADDRESSITEM.getText() != 'Principal Address') {
                                                       break;
                                                    } else if (ADDRESSITEM.getName() == 'ADDRESSTYPE' && ADDRESSITEM.getText() == 'Principal Address') {
                                                        continue;
                                                    }

                                                    if (ADDRESSITEM.getName() == 'ZIPCODE') {
                                                        return ADDRESSITEM.getText();
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }                                 
                            }
                        }
                    }
                }
            }
        }

        return null; 
    }


    public static String returnCity(Dom.XMLNode node) {
        for (Dom.XMLNode ICON : node.getChildElements()) {
            if (ICON.getName() == 'ICON') {
                for (Dom.XMLNode CREDITREPORT : ICON.getChildElements()) {
                    if (CREDITREPORT.getName() == 'CREDITREPORT') {
                        for (Dom.XMLNode COMPANY : CREDITREPORT.getChildElements()) {
                            if (COMPANY.getName() == 'COMPANY') {
                                for (Dom.XMLNode ADDRESSES : COMPANY.getChildElements()) {
                                    if (ADDRESSES.getName() == 'ADDRESSES') {
                                        for (Dom.XMLNode ADDRESS : ADDRESSES.getChildElements()) {
                                            if (ADDRESS.getName() == 'ADDRESS') {
                                                for (Dom.XMLNode ADDRESSITEM : ADDRESS.getChildElements()) {
                                                    if (ADDRESSITEM.getName() == 'ADDRESSTYPE' && ADDRESSITEM.getText() != 'Principal Address') {
                                                       break;
                                                    } else if (ADDRESSITEM.getName() == 'ADDRESSTYPE' && ADDRESSITEM.getText() == 'Principal Address') {
                                                        continue;
                                                    }

                                                    if (ADDRESSITEM.getName() == 'CITY') {
                                                        return ADDRESSITEM.getText();
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }                                 
                            }
                        }
                    }
                }
            }
        }

        return null; 
    }


    public static String returnPhone(Dom.XMLNode node) {
        for (Dom.XMLNode ICON : node.getChildElements()) {
            if (ICON.getName() == 'ICON') {
                for (Dom.XMLNode CREDITREPORT : ICON.getChildElements()) {
                    if (CREDITREPORT.getName() == 'CREDITREPORT') {
                        for (Dom.XMLNode COMPANY : CREDITREPORT.getChildElements()) {
                            if (COMPANY.getName() == 'COMPANY') {
                                for (Dom.XMLNode ADDRESSES : COMPANY.getChildElements()) {
                                    if (ADDRESSES.getName() == 'ADDRESSES') {
                                        for (Dom.XMLNode ADDRESS : ADDRESSES.getChildElements()) {
                                            if (ADDRESS.getName() == 'ADDRESS') {
                                                for (Dom.XMLNode ADDRESSITEM : ADDRESS.getChildElements()) {
                                                    if (ADDRESSITEM.getName() == 'ADDRESSTYPE' && ADDRESSITEM.getText() != 'Principal Address') {
                                                       break;
                                                    } else if (ADDRESSITEM.getName() == 'ADDRESSTYPE' && ADDRESSITEM.getText() == 'Principal Address') {
                                                        continue;
                                                    }

                                                    if (ADDRESSITEM.getName() == 'TELEPHONE') {
                                                        String phone = '+';
                                                        for (Dom.XMLNode PHONEITEM : ADDRESSITEM.getChildElements()) {
                                                            phone += PHONEITEM.getText();
                                                        }

                                                        return phone;
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }                                 
                            }
                        }
                    }
                }
            }
        }

        return null; 
    }


    public static String returnFax(Dom.XMLNode node) {
        for (Dom.XMLNode ICON : node.getChildElements()) {
            if (ICON.getName() == 'ICON') {
                for (Dom.XMLNode CREDITREPORT : ICON.getChildElements()) {
                    if (CREDITREPORT.getName() == 'CREDITREPORT') {
                        for (Dom.XMLNode COMPANY : CREDITREPORT.getChildElements()) {
                            if (COMPANY.getName() == 'COMPANY') {
                                for (Dom.XMLNode ADDRESSES : COMPANY.getChildElements()) {
                                    if (ADDRESSES.getName() == 'ADDRESSES') {
                                        for (Dom.XMLNode ADDRESS : ADDRESSES.getChildElements()) {
                                            if (ADDRESS.getName() == 'ADDRESS') {
                                                for (Dom.XMLNode ADDRESSITEM : ADDRESS.getChildElements()) {
                                                    if (ADDRESSITEM.getName() == 'ADDRESSTYPE' && ADDRESSITEM.getText() != 'Principal Address') {
                                                       break;
                                                    } else if (ADDRESSITEM.getName() == 'ADDRESSTYPE' && ADDRESSITEM.getText() == 'Principal Address') {
                                                        continue;
                                                    }

                                                    if (ADDRESSITEM.getName() == 'FAX') {
                                                        String fax = '+';
                                                        for (Dom.XMLNode FAXITEM : ADDRESSITEM.getChildElements()) {
                                                            fax += FAXITEM.getText();
                                                        }

                                                        return fax;
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }                                 
                            }
                        }
                    }
                }
            }
        }

        return null; 
    }


    public static String returnEmail(Dom.XMLNode node) {
        for (Dom.XMLNode ICON : node.getChildElements()) {
            if (ICON.getName() == 'ICON') {
                for (Dom.XMLNode CREDITREPORT : ICON.getChildElements()) {
                    if (CREDITREPORT.getName() == 'CREDITREPORT') {
                        for (Dom.XMLNode COMPANY : CREDITREPORT.getChildElements()) {
                            if (COMPANY.getName() == 'COMPANY') {
                                for (Dom.XMLNode ADDRESSES : COMPANY.getChildElements()) {
                                    if (ADDRESSES.getName() == 'ADDRESSES') {
                                        for (Dom.XMLNode ADDRESS : ADDRESSES.getChildElements()) {
                                            if (ADDRESS.getName() == 'ADDRESS') {
                                                for (Dom.XMLNode ADDRESSITEM : ADDRESS.getChildElements()) {
                                                    if (ADDRESSITEM.getName() == 'ADDRESSTYPE' && ADDRESSITEM.getText() != 'Principal Address') {
                                                       break;
                                                    } else if (ADDRESSITEM.getName() == 'ADDRESSTYPE' && ADDRESSITEM.getText() == 'Principal Address') {
                                                        continue;
                                                    }

                                                    if (ADDRESSITEM.getName() == 'EMAIL') {
                                                        return ADDRESSITEM.getText();
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }                                 
                            }
                        }
                    }
                }
            }
        }

        return null; 
    }


    public static String returnWebsite(Dom.XMLNode node) {
        for (Dom.XMLNode ICON : node.getChildElements()) {
            if (ICON.getName() == 'ICON') {
                for (Dom.XMLNode CREDITREPORT : ICON.getChildElements()) {
                    if (CREDITREPORT.getName() == 'CREDITREPORT') {
                        for (Dom.XMLNode COMPANY : CREDITREPORT.getChildElements()) {
                            if (COMPANY.getName() == 'COMPANY') {
                                for (Dom.XMLNode ADDRESSES : COMPANY.getChildElements()) {
                                    if (ADDRESSES.getName() == 'ADDRESSES') {
                                        for (Dom.XMLNode ADDRESS : ADDRESSES.getChildElements()) {
                                            if (ADDRESS.getName() == 'ADDRESS') {
                                                for (Dom.XMLNode ADDRESSITEM : ADDRESS.getChildElements()) {
                                                    if (ADDRESSITEM.getName() == 'ADDRESSTYPE' && ADDRESSITEM.getText() != 'Principal Address') {
                                                       break;
                                                    } else if (ADDRESSITEM.getName() == 'ADDRESSTYPE' && ADDRESSITEM.getText() == 'Principal Address') {
                                                        continue;
                                                    }

                                                    if (ADDRESSITEM.getName() == 'INTERNET') {
                                                        return ADDRESSITEM.getText();
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }                                 
                            }
                        }
                    }
                }
            }
        }

        return null; 
    }


    public static String returnName(Dom.XMLNode node) {
        for (Dom.XMLNode immediateOrderResponse : node.getChildElements()) {
            if (immediateOrderResponse.getName() == 'immediateOrderResponse' || immediateOrderResponse.getName() == 'getCompanyReportResponse') {
                for (Dom.XMLNode immediateOrderResult : immediateOrderResponse.getChildElements()) {
                    if (immediateOrderResult.getName() == 'immediateOrderResult' || immediateOrderResult.getName() == 'getCompanyReportResult') {
                        for (Dom.XMLNode orderInner : immediateOrderResult.getChildElements()) {
                            if (orderInner.getName() == 'Report') {
                                for (Dom.XMLNode Company : orderInner.getChildElements()) {
                                    if (Company.getName() == 'Company') {
                                        for (Dom.XMLNode Name : Company.getChildElements()) {
                                            if (Name.getName() == 'Name') {
                                                return Name.getText();
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }

        return null;
    }


    public static String returnTradeName(Dom.XMLNode node) {
        for (Dom.XMLNode immediateOrderResponse : node.getChildElements()) {
            if (immediateOrderResponse.getName() == 'immediateOrderResponse' || immediateOrderResponse.getName() == 'getCompanyReportResponse') {
                for (Dom.XMLNode immediateOrderResult : immediateOrderResponse.getChildElements()) {
                    if (immediateOrderResult.getName() == 'immediateOrderResult' || immediateOrderResult.getName() == 'getCompanyReportResult') {
                        for (Dom.XMLNode orderInner : immediateOrderResult.getChildElements()) {
                            if (orderInner.getName() == 'Report') {
                                for (Dom.XMLNode Company : orderInner.getChildElements()) {
                                    if (Company.getName() == 'Company') {
                                        for (Dom.XMLNode SortName : Company.getChildElements()) {
                                            if (SortName.getName() == 'SortName') {
                                                return SortName.getText();
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }

        return null;
    }


    public static String returnVatId(Dom.XMLNode node) {
        for (Dom.XMLNode ICON : node.getChildElements()) {
            if (ICON.getName() == 'ICON') {
                for (Dom.XMLNode CREDITREPORT : ICON.getChildElements()) {
                    if (CREDITREPORT.getName() == 'CREDITREPORT') {
                        for (Dom.XMLNode COMPANY : CREDITREPORT.getChildElements()) {
                            if (COMPANY.getName() == 'UNSTRUCTURED' && COMPANY.getText().contains('International VAT number: ') && COMPANY.getText().substringAfter('International VAT number: ').contains('\n')) {
                                return COMPANY.getText().substringBetween('International VAT number: ','\n');
                            }
                        }
                    }
                }
            }
        }

        return null;      
    }


    public static String returnRegisterId(Dom.XMLNode node) {
        for (Dom.XMLNode ICON : node.getChildElements()) {
            if (ICON.getName() == 'ICON') {
                for (Dom.XMLNode CREDITREPORT : ICON.getChildElements()) {
                    if (CREDITREPORT.getName() == 'CREDITREPORT') {
                        for (Dom.XMLNode COMPANY : CREDITREPORT.getChildElements()) {
                            if (COMPANY.getName() == 'COMPANY') {
                                for (Dom.XMLNode REGISTRATION : COMPANY.getChildElements()) {
                                    if (REGISTRATION.getName() == 'REGISTRATION') {
                                        for (Dom.XMLNode NUMBERENTRY : REGISTRATION.getChildElements()) {
                                            if (NUMBERENTRY.getName() == 'NUMBER') {
                                                return NUMBERENTRY.getText();
                                            }
                                        }
                                    }
                                }                                
                            }
                        }
                    }
                }
            }
        }

        return null;        
    }


    public static String returnCreditLimit(Dom.XMLNode node) {
        for (Dom.XMLNode ICON : node.getChildElements()) {
            if (ICON.getName() == 'ICON') {
                for (Dom.XMLNode CREDITREPORT : ICON.getChildElements()) {
                    if (CREDITREPORT.getName() == 'CREDITREPORT') {
                        for (Dom.XMLNode MAXIMUMCREDIT : CREDITREPORT.getChildElements()) {
                            if (MAXIMUMCREDIT.getName() == 'MAXIMUMCREDIT') {
                                for (Dom.XMLNode INDICATOR : MAXIMUMCREDIT.getChildElements()) {
                                    if (INDICATOR.getName() == 'INDICATOR') {
                                        for (Dom.XMLNode FROMAMOUNT : INDICATOR.getChildElements()) {
                                            if (FROMAMOUNT.getName() == 'FROMAMOUNT') {
                                                return FROMAMOUNT.getText();
                                            }
                                        }
                                    }
                                }                                
                            }
                        }
                    }
                }
            }
        }

        return null;        
    }


    public static String returnStaffCompanyRange(Dom.XMLNode node) {
        for (Dom.XMLNode ICON : node.getChildElements()) {
            if (ICON.getName() == 'ICON') {
                for (Dom.XMLNode CREDITREPORT : ICON.getChildElements()) {
                    if (CREDITREPORT.getName() == 'CREDITREPORT') {
                        for (Dom.XMLNode WORKFORCE : CREDITREPORT.getChildElements()) {
                            if (WORKFORCE.getName() == 'WORKFORCE') {
                                for (Dom.XMLNode INDICATOR : WORKFORCE.getChildElements()) {
                                    if (INDICATOR.getName() == 'INDICATOR') {
                                        String range = '';
                                        for (Dom.XMLNode INDICATORITEM : INDICATOR.getChildElements()) {
                                            if (INDICATORITEM.getName() == 'FROMAMOUNT') {
                                                range = INDICATORITEM.getText();
                                                
                                            }
                                            if (INDICATORITEM.getName() == 'TOAMOUNT') {
                                                if (INDICATORITEM.getText() != null && INDICATORITEM.getText() != '') {
                                                    range = range + '-' + INDICATORITEM.getText();
                                                }
                                                return range;
                                            }
                                        }
                                    }
                                }                                
                            }
                        }
                    }
                }
            }
        }

        return null;        
    }


    public static String returnCreditLimitCurrency(Dom.XMLNode node) {
        for (Dom.XMLNode ICON : node.getChildElements()) {
            if (ICON.getName() == 'ICON') {
                for (Dom.XMLNode CREDITREPORT : ICON.getChildElements()) {
                    if (CREDITREPORT.getName() == 'CREDITREPORT') {
                        for (Dom.XMLNode MAXIMUMCREDIT : CREDITREPORT.getChildElements()) {
                            if (MAXIMUMCREDIT.getName() == 'MAXIMUMCREDIT') {
                                for (Dom.XMLNode INDICATOR : MAXIMUMCREDIT.getChildElements()) {
                                    if (INDICATOR.getName() == 'INDICATOR') {
                                        for (Dom.XMLNode CURRENCYITEM : INDICATOR.getChildElements()) {
                                            if (CURRENCYITEM.getName() == 'CURRENCY') {
                                                return CURRENCYITEM.getText();
                                            }
                                        }
                                    }
                                }                                
                            }
                        }
                    }
                }
            }
        }

        return null;        
    }


    public static String returnTurnOver(Dom.XMLNode node) {
        for (Dom.XMLNode ICON : node.getChildElements()) {
            if (ICON.getName() == 'ICON') {
                for (Dom.XMLNode CREDITREPORT : ICON.getChildElements()) {
                    if (CREDITREPORT.getName() == 'CREDITREPORT') {
                        for (Dom.XMLNode COMPANY : CREDITREPORT.getChildElements()) {
                            if (COMPANY.getName() == 'UNSTRUCTURED' && COMPANY.getText().contains('Net sales revenue ')) {
                                String turnOverXml = COMPANY.getText().substringBetween('Net sales revenue ','\n');
                                if (turnOverXml != null && turnOverXml.contains(',') && turnOverXml.substringAfter(',').length() >= 2) {
                                    turnOverXml = turnOverXml.replace('.', '');
                                    turnOverXml = ((turnOverXml.substringBefore(',') + '.' + turnOverXml.substringAfter(',').substring(0, 2)).replaceAll(' ', ''));
                                    if (COMPANY.getText().contains('Amounts shown in Euro (EUR) Thousand')) {
                                        return String.valueOf((Decimal.valueOf(turnOverXml) * 1000 * 310).setScale(2));
                                    } else if (COMPANY.getText().contains('Amounts shown in Euro (EUR)')) {
                                        return String.valueOf((Decimal.valueOf(turnOverXml) * 310).setScale(2));
                                    } else if (COMPANY.getText().contains('Amounts shown in Hungarian Forint (HUF) Thousand')) {
                                        return String.valueOf((Decimal.valueOf(turnOverXml) * 1000).setScale(2));
                                    } else if (COMPANY.getText().contains('Amounts shown in Hungarian Forint (HUF)')) {
                                        return String.valueOf((Decimal.valueOf(turnOverXml)).setScale(2));
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }

        return null; 
    }


    public static String returnDateLastRegisterEntry(Dom.XMLNode node) {
        for (Dom.XMLNode ICON : node.getChildElements()) {
            if (ICON.getName() == 'ICON') {
                for (Dom.XMLNode CREDITREPORT : ICON.getChildElements()) {
                    if (CREDITREPORT.getName() == 'CREDITREPORT') {
                        for (Dom.XMLNode COMPANY : CREDITREPORT.getChildElements()) {
                            if (COMPANY.getName() == 'UNSTRUCTURED' && COMPANY.getText().contains('Activity status:')) {
                                String lastEntryXml = COMPANY.getText().substringBetween('Activity status:','\n');
                                lastEntryXml = lastEntryXml.replaceAll(' ', '');
                                return lastEntryXml;
                            }
                        }
                    }
                }
            }
        }

        return null; 
    }

    
    public static String returnDateLegalForm(Dom.XMLNode node) {
        for (Dom.XMLNode ICON : node.getChildElements()) {
            if (ICON.getName() == 'ICON') {
                for (Dom.XMLNode CREDITREPORT : ICON.getChildElements()) {
                    if (CREDITREPORT.getName() == 'CREDITREPORT') {
                        for (Dom.XMLNode COMPANY : CREDITREPORT.getChildElements()) {
                            if (COMPANY.getName() == 'UNSTRUCTURED' && COMPANY.getText().contains('Legal Form:')) {
                                String dateLegalFormXml = COMPANY.getText().substringBetween('Legal Form:','\n');
                                dateLegalFormXml = dateLegalFormXml.replaceAll(' ', '');
                                if (! dateLegalFormXml.isAlpha()) {
                                    return dateLegalFormXml;
                                }
                            }
                        }
                    }
                }
            }
        }

        return null; 
    }


    public static String returnTaxNumber(Dom.XMLNode node) {
        for (Dom.XMLNode ICON : node.getChildElements()) {
            if (ICON.getName() == 'ICON') {
                for (Dom.XMLNode CREDITREPORT : ICON.getChildElements()) {
                    if (CREDITREPORT.getName() == 'CREDITREPORT') {
                        for (Dom.XMLNode COMPANY : CREDITREPORT.getChildElements()) {
                            if (COMPANY.getName() == 'COMPANY') {
                                for (Dom.XMLNode VATNUMBER : COMPANY.getChildElements()) {
                                    if (VATNUMBER.getName() == 'VATNUMBER') {
                                        for (Dom.XMLNode VALUE : VATNUMBER.getChildElements()) {
                                            if (VALUE.getName() == 'VALUE') {
                                                return VALUE.getText();
                                            }
                                        }
                                    }
                                }                                
                            }
                        }
                    }
                }
            }
        }

        return null;     
    }


    public static String returnStatus(Dom.XMLNode node) {
        for (Dom.XMLNode ICON : node.getChildElements()) {
            if (ICON.getName() == 'ICON') {
                for (Dom.XMLNode CREDITREPORT : ICON.getChildElements()) {
                    if (CREDITREPORT.getName() == 'CREDITREPORT') {
                        for (Dom.XMLNode COMPANY : CREDITREPORT.getChildElements()) {
                            if (COMPANY.getName() == 'COMPANY') {
                                for (Dom.XMLNode STATUS : COMPANY.getChildElements()) {
                                    if (STATUS.getName() == 'STATUS') {
                                        return STATUS.getText();
                                    }
                                }                                
                            }
                        }
                    }
                }
            }
        }

        return null;        
    }


    public static String returnLegalForm(Dom.XMLNode node) {
        for (Dom.XMLNode ICON : node.getChildElements()) {
            if (ICON.getName() == 'ICON') {
                for (Dom.XMLNode CREDITREPORT : ICON.getChildElements()) {
                    if (CREDITREPORT.getName() == 'CREDITREPORT') {
                        for (Dom.XMLNode COMPANY : CREDITREPORT.getChildElements()) {
                            if (COMPANY.getName() == 'COMPANY') {
                                for (Dom.XMLNode LEGALFORM : COMPANY.getChildElements()) {
                                    if (LEGALFORM.getName() == 'LEGALFORM') {
                                        return LEGALFORM.getText();
                                    }
                                }                                
                            }
                        }
                    }
                }
            }
        }

        return null;        
    }


    public static String returnReferenceNumber(Dom.XMLNode node) {
        for (Dom.XMLNode ICON : node.getChildElements()) {
            if (ICON.getName() == 'ICON') {
                for (Dom.XMLNode CREDITREPORT : ICON.getChildElements()) {
                    if (CREDITREPORT.getName() == 'CREDITREPORT') {
                        for (Dom.XMLNode COMPANY : CREDITREPORT.getChildElements()) {
                            if (COMPANY.getName() == 'COMPANY') {
                                for (Dom.XMLNode EASYNUMBER : COMPANY.getChildElements()) {
                                    if (EASYNUMBER.getName() == 'EASYNUMBER') {
                                        return EASYNUMBER.getText();
                                    }
                                }                                
                            }
                        }
                    }
                }
            }
        }

        return null;
    }


    public static String returnRating(Dom.XMLNode node) {
        String classRating;
        for (Dom.XMLNode ICON : node.getChildElements()) {
            if (ICON.getName() == 'ICON') {
                for (Dom.XMLNode CREDITREPORT : ICON.getChildElements()) {
                    if (CREDITREPORT.getName() == 'CREDITREPORT') {
                        for (Dom.XMLNode reportField : CREDITREPORT.getChildElements()) {
                            if (reportField.getName() == 'CUSTOMERSPECIFICMAXCREDITS') {
                                for (Dom.XMLNode CUSTOMERSPECIFICMAXCREDIT : reportField.getChildElements()) {
                                    if (CUSTOMERSPECIFICMAXCREDIT.getName() == 'CUSTOMERSPECIFICMAXCREDIT') {
                                        for (Dom.XMLNode CSMAXCREDITVALUE : CUSTOMERSPECIFICMAXCREDIT.getChildElements()) {
                                            if (CSMAXCREDITVALUE.getName() == 'CSMAXCREDITVALUE') {
                                                classRating = CreditFactoryUtilities.returnCofaceClassRating(CSMAXCREDITVALUE.getText());
                                            }
                                        }
                                    }
                                }
                            }
                        }

                        if (classRating == null) {
                            for (Dom.XMLNode reportField : CREDITREPORT.getChildElements()) {
                                if (reportField.getName() == 'CCEATRATING') {
                                    for (Dom.XMLNode ratingField : reportField.getChildElements()) {
                                        if (ratingField.getName() == 'SCORE') {
                                            classRating = CreditFactoryUtilities.returnCofaceOrderedReportClassRating(ratingField.getAttribute('VALUE', null));
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }

        return classRating;
    }


    public static String returnDateOfLastMajorUpdate(Dom.XMLNode node) {
        String dateOfLastMajorUpdate;
        for (Dom.XMLNode bodyField : node.getChildElements()) {
            if (bodyField.getName() == 'ICON') {
                for (Dom.XMLNode iconField : bodyField.getChildElements()) {
                    if (iconField.getName() == 'CREDITREPORT') {
                        for (Dom.XMLNode creditReportField : iconField.getChildElements()) {
                            if (creditReportField.getName() == 'COMPANY') {
                                for (Dom.XMLNode companyField : creditReportField.getChildElements()) {
                                    if (companyField.getName() == 'LASTMAJORUPDATE') {
                                        dateOfLastMajorUpdate = companyField.getText();
                                    }
                                }                                
                            }
                        }

                        if (dateOfLastMajorUpdate == null) {
                            for (Dom.XMLNode reportField : iconField.getChildElements()) {
                                if (reportField.getName() == 'CCEATRATING') {
                                    for (Dom.XMLNode ratingField : reportField.getChildElements()) {
                                        if (ratingField.getName() == 'DATE') {
                                            dateOfLastMajorUpdate = ratingField.getText();
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }

        return dateOfLastMajorUpdate;
    }


    /*******************************************************************************
    *  Name            : returnProfitLossLastYear(Dom.XMLNode node)
    *  Summary         : Return Profit/Loss for the last year 
    *  CreatedDate     : 12/03/2019
    *  ModifiedDate    : -
    *  Parameters      : Dom.XMLNode node
    *  Returns         : String
    ******************************************************************************/
    public static String returnProfitLossLastYear(Dom.XMLNode node) {
        for (Dom.XMLNode ICON : node.getChildElements()) {
            if (ICON.getName() == 'ICON') {
                for (Dom.XMLNode CREDITREPORT : ICON.getChildElements()) {
                    if (CREDITREPORT.getName() == 'CREDITREPORT') {
                        for (Dom.XMLNode COMPANY : CREDITREPORT.getChildElements()) {
                            if (COMPANY.getName() == 'UNSTRUCTURED') {
                                if (COMPANY.getText().contains('FINANCIAL INFORMATION')) {
                                    String financialInformation = COMPANY.getText().substringAfter('FINANCIAL INFORMATION');
                                    String currencyDescription;
                                    Decimal k;
                                    if (financialInformation.contains('Amounts shown in Euro (EUR) Thousand')) {
                                        currencyDescription = 'Amounts shown in Euro (EUR) Thousand';
                                        k = 1000 * 310;
                                    } else if (financialInformation.contains('Amounts shown in Euro (EUR)')) {
                                        currencyDescription = 'Amounts shown in Euro (EUR)';
                                        k = 310;
                                    } else if (financialInformation.contains('Amounts shown in Hungarian Forint (HUF) Thousand')) {
                                        currencyDescription = 'Amounts shown in Hungarian Forint (HUF) Thousand';
                                        k = 1000;
                                    } else if (financialInformation.contains('Amounts shown in Hungarian Forint (HUF)')) {
                                        currencyDescription = 'Amounts shown in Hungarian Forint (HUF)';
                                        k = 1;
                                    }
                                    List<String> yearsList = new List<String>();
                                    if (currencyDescription != null && financialInformation.contains(currencyDescription + '\n') && 
                                            financialInformation.substringAfter(currencyDescription + '\n').contains('\n')) {
                                        String yearsString = financialInformation.substringBetween(currencyDescription + '\n', '\n').deleteWhitespace().replaceAll('[0-9]{2}[.]', '');
                                        for (Integer i=0; i<yearsString.length(); i+=4) {
                                            if (yearsString.length() >= i+4) {
                                                yearsList.add(yearsString.substring(i, i+4));
                                            }
                                        }
                                        String profitLoss;
                                        if (financialInformation.contains('Operating ( trading )')) {
                                            profitLoss = 'Operating ( trading )';
                                        } else if (financialInformation.contains('Operating result')) {
                                            profitLoss = 'Operating result';
                                        }
                                        if (profitLoss != null && financialInformation.contains(profitLoss) && financialInformation.substringAfter(profitLoss).contains('\n')) {
                                            String amountsString = financialInformation.substringBetween(profitLoss, '\n').deleteWhitespace().replace('.', '');
                                            Integer numberOfYearsAgo;
                                            for (String year : yearsList) {
                                                if (year == String.valueOf(Date.today().year() - 1)) {
                                                    numberOfYearsAgo = 1;
                                                }
                                            }
                                            if (numberOfYearsAgo == null) {
                                                if (Date.today() >= Date.newInstance(Date.today().year(), 05, 01)) {
                                                    numberOfYearsAgo = 1;
                                                } else {
                                                    numberOfYearsAgo = 2;
                                                }
                                            }
                                            for (String year : yearsList) {
                                                if (amountsString.contains(',') && amountsString.substringAfter(',').length() >= 2) {
                                                    String amount = amountsString.substringBefore(',') + '.' + amountsString.substringAfter(',').substring(0, 2);
                                                    if (year == String.valueOf(Date.today().year() - numberOfYearsAgo)) {
                                                        return String.valueOf(Decimal.valueOf(amount) * k);
                                                    } else {
                                                        amountsString = amountsString.substring(amount.length(), amountsString.length());
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }

        return null; 
    }


     /*******************************************************************************
    *  Name            : returnProfitLossYearBeforeLast(Dom.XMLNode node)
    *  Summary         : Return Profit/Loss for the year before last
    *  CreatedDate     : 12/03/2019
    *  ModifiedDate    : -
    *  Parameters      : Dom.XMLNode node
    *  Returns         : String
    ******************************************************************************/
    public static String returnProfitLossYearBeforeLast(Dom.XMLNode node) {
        for (Dom.XMLNode ICON : node.getChildElements()) {
            if (ICON.getName() == 'ICON') {
                for (Dom.XMLNode CREDITREPORT : ICON.getChildElements()) {
                    if (CREDITREPORT.getName() == 'CREDITREPORT') {
                        for (Dom.XMLNode COMPANY : CREDITREPORT.getChildElements()) {
                            if (COMPANY.getName() == 'UNSTRUCTURED') {
                                if (COMPANY.getText().contains('FINANCIAL INFORMATION')) {
                                    String financialInformation = COMPANY.getText().substringAfter('FINANCIAL INFORMATION');
                                    String currencyDescription;
                                    Decimal k;
                                    if (financialInformation.contains('Amounts shown in Euro (EUR) Thousand')) {
                                        currencyDescription = 'Amounts shown in Euro (EUR) Thousand';
                                        k = 1000 * 310;
                                    } else if (financialInformation.contains('Amounts shown in Euro (EUR)')) {
                                        currencyDescription = 'Amounts shown in Euro (EUR)';
                                        k = 310;
                                    } else if (financialInformation.contains('Amounts shown in Hungarian Forint (HUF) Thousand')) {
                                        currencyDescription = 'Amounts shown in Hungarian Forint (HUF) Thousand';
                                        k = 1000;
                                    } else if (financialInformation.contains('Amounts shown in Hungarian Forint (HUF)')) {
                                        currencyDescription = 'Amounts shown in Hungarian Forint (HUF)';
                                        k = 1;
                                    }
                                    List<String> yearsList = new List<String>();
                                    if (currencyDescription != null && financialInformation.contains(currencyDescription + '\n') && 
                                            financialInformation.substringAfter(currencyDescription + '\n').contains('\n')) {
                                        String yearsString = financialInformation.substringBetween(currencyDescription + '\n', '\n').deleteWhitespace().replaceAll('[0-9]{2}[.]', '');
                                        for (Integer i=0; i<yearsString.length(); i+=4) {
                                            if (yearsString.length() >= i+4) {
                                                yearsList.add(yearsString.substring(i, i+4));
                                            }
                                        }
                                        String profitLoss;
                                        if (financialInformation.contains('Operating ( trading )')) {
                                            profitLoss = 'Operating ( trading )';
                                        } else if (financialInformation.contains('Operating result')) {
                                            profitLoss = 'Operating result';
                                        }
                                        if (profitLoss != null && financialInformation.contains(profitLoss) && financialInformation.substringAfter(profitLoss).contains('\n')) {
                                            String amountsString = financialInformation.substringBetween(profitLoss, '\n').deleteWhitespace().replace('.', '');
                                            Integer numberOfYearsAgo;
                                            for (String year : yearsList) {
                                                if (year == String.valueOf(Date.today().year() - 1)) {
                                                    numberOfYearsAgo = 2;
                                                }
                                            }
                                            if (numberOfYearsAgo == null) {
                                                if (Date.today() >= Date.newInstance(Date.today().year(), 05, 01)) {
                                                    numberOfYearsAgo = 2;
                                                } else {
                                                    numberOfYearsAgo = 3;
                                                }
                                            }
                                            for (String year : yearsList) {
                                                if (amountsString.contains(',') && amountsString.substringAfter(',').length() >= 2) {
                                                    String amount = amountsString.substringBefore(',') + '.' + amountsString.substringAfter(',').substring(0, 2);
                                                    if (year == String.valueOf(Date.today().year() - numberOfYearsAgo)) {
                                                        return String.valueOf(Decimal.valueOf(amount) * k);
                                                    } else {
                                                        amountsString = amountsString.substring(amount.length(), amountsString.length());
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }

        return null; 
    }


    /*******************************************************************************
    *  Name            : returnTurnOverLastYear(Dom.XMLNode node)
    *  Summary         : Return Turn Over for the last year 
    *  CreatedDate     : 12/03/2019
    *  ModifiedDate    : -
    *  Parameters      : Dom.XMLNode node
    *  Returns         : String
    ******************************************************************************/
    public static String returnTurnOverLastYear(Dom.XMLNode node) {
        for (Dom.XMLNode ICON : node.getChildElements()) {
            if (ICON.getName() == 'ICON') {
                for (Dom.XMLNode CREDITREPORT : ICON.getChildElements()) {
                    if (CREDITREPORT.getName() == 'CREDITREPORT') {
                        for (Dom.XMLNode COMPANY : CREDITREPORT.getChildElements()) {
                            if (COMPANY.getName() == 'UNSTRUCTURED') {
                                if (COMPANY.getText().contains('FINANCIAL INFORMATION')) {
                                    String financialInformation = COMPANY.getText().substringAfter('FINANCIAL INFORMATION');
                                    String currencyDescription;
                                    Decimal k;
                                    if (financialInformation.contains('Amounts shown in Euro (EUR) Thousand')) {
                                        currencyDescription = 'Amounts shown in Euro (EUR) Thousand';
                                        k = 1000 * 310;
                                    } else if (financialInformation.contains('Amounts shown in Euro (EUR)')) {
                                        currencyDescription = 'Amounts shown in Euro (EUR)';
                                        k = 310;
                                    } else if (financialInformation.contains('Amounts shown in Hungarian Forint (HUF) Thousand')) {
                                        currencyDescription = 'Amounts shown in Hungarian Forint (HUF) Thousand';
                                        k = 1000;
                                    } else if (financialInformation.contains('Amounts shown in Hungarian Forint (HUF)')) {
                                        currencyDescription = 'Amounts shown in Hungarian Forint (HUF)';
                                        k = 1;
                                    }
                                    List<String> yearsList = new List<String>();
                                    if (currencyDescription != null && financialInformation.contains(currencyDescription + '\n') && 
                                            financialInformation.substringAfter(currencyDescription + '\n').contains('\n')) {
                                        String yearsString = financialInformation.substringBetween(currencyDescription + '\n', '\n').deleteWhitespace().replaceAll('[0-9]{2}[.]', '');
                                        for (Integer i=0; i<yearsString.length(); i+=4) {
                                            if (yearsString.length() >= i+4) {
                                                yearsList.add(yearsString.substring(i, i+4));
                                            }
                                        }
                                        if (financialInformation.contains('Net sales revenue') && financialInformation.substringAfter('Net sales revenue').contains('\n')) {
                                            String amountsString = financialInformation.substringBetween('Net sales revenue', '\n').deleteWhitespace().replace('.', '');
                                            Integer numberOfYearsAgo;
                                            for (String year : yearsList) {
                                                if (year == String.valueOf(Date.today().year() - 1)) {
                                                    numberOfYearsAgo = 1;
                                                }
                                            }
                                            if (numberOfYearsAgo == null) {
                                                if (Date.today() >= Date.newInstance(Date.today().year(), 05, 01)) {
                                                    numberOfYearsAgo = 1;
                                                } else {
                                                    numberOfYearsAgo = 2;
                                                }
                                            }
                                            for (String year : yearsList) {
                                                if (amountsString.contains(',') && amountsString.substringAfter(',').length() >= 2) {
                                                    String amount = amountsString.substringBefore(',') + '.' + amountsString.substringAfter(',').substring(0, 2);
                                                    if (year == String.valueOf(Date.today().year() - numberOfYearsAgo)) {
                                                        return String.valueOf(Decimal.valueOf(amount) * k);
                                                    } else {
                                                        amountsString = amountsString.substring(amount.length(), amountsString.length());
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }

        return null; 
    }


    /*******************************************************************************
    *  Name            : returnReportCompanyEmployees(Dom.XMLNode node)
    *  Summary         : Return Company Employees
    *  CreatedDate     : 23/02/2018
    *  Parameters      : node - XML report from the response
    *  Returns         : Dom.XMLNode
    ******************************************************************************/
    public static List<CreditCompanyEmployee> returnReportCompanyEmployees(Dom.XMLNode node) {
        List<CreditCompanyEmployee> companyEmployeesList = new List<CreditCompanyEmployee>();
        for (Dom.XMLNode ICON : node.getChildElements()) {
            if (ICON.getName() == 'ICON') {
                for (Dom.XMLNode CREDITREPORT : ICON.getChildElements()) {
                    if (CREDITREPORT.getName() == 'CREDITREPORT') {
                        for (Dom.XMLNode MANAGEMENT : CREDITREPORT.getChildElements()) {
                            if (MANAGEMENT.getName() == 'MANAGEMENT') {
                                for (Dom.XMLNode MANAGER : MANAGEMENT.getChildElements()) {
                                    if (MANAGER.getName() == 'MANAGER') {
                                        CreditCompanyEmployee employee = new CreditCompanyEmployee();
                                        for (Dom.XMLNode MANAGERFIELD : MANAGER.getChildElements()) {
                                            if (MANAGERFIELD.getName() == 'NAME') {
                                                employee.ename = MANAGERFIELD.getText();
                                            }

                                            if (MANAGERFIELD.getName() == 'TYPE') {
                                                employee.type = MANAGERFIELD.getText();
                                            }

                                            String address = '';

                                            if (MANAGERFIELD.getName() == 'ADDRESS') {
                                                for (Dom.XMLNode ADDRESSITEM : MANAGERFIELD.getChildElements()) {
                                                    if (ADDRESSITEM.getName() == 'STREET') {
                                                        address += ADDRESSITEM.getText();
                                                    }

                                                    if (ADDRESSITEM.getName() == 'HOUSENUMBER') {
                                                        address += ' ' + ADDRESSITEM.getText();
                                                    }

                                                    if (ADDRESSITEM.getName() == 'ZIPCODE') {
                                                        address += ' ' + ADDRESSITEM.getText();
                                                    }

                                                    if (ADDRESSITEM.getName() == 'CITY') {
                                                        address += ' ' + ADDRESSITEM.getText();
                                                    }
                                                }
                                                employee.address = address;
                                            }
                                        }
                                        companyEmployeesList.add(employee);
                                    }
                                }                                
                            }
                        }
                    }
                }
            }
        }

        return companyEmployeesList;
    }


    /*******************************************************************************
    *  Name            : generateOrderRequest(String endpoint, String userName, String password, String apiKey, String name, 
                                              String postalCode, String city, String street, String houseNumber)
    *  Summary         : Generate Order HTTP Request to Coface    
    *  CreatedDate     : 29/06/2018
    *  ModifiedDate    : -
    *  Parameters      : String endpoint - endpoint url, String userName - Coface account name, 
                         String password - Coface password, String internal Id - Coface company internal Id, 
                         String vatNumber - company vat number, String companyName - company name, 
                         String postalCode - company postal code, String city - company city, 
                         String street - company city, String houseNumber - company house number
    *  Returns         : HttpRequest
    ******************************************************************************/
    public static HttpRequest generateOrderRequest(String endpoint, String userName, String password, String internalId, 
                                                   String vatNumber, String companyName, String postalCode, String city, 
                                                   String street, String houseNumber) {
        try {
            String xmlBody = generateOrderXML(userName, password, internalId, vatNumber, companyName, postalCode, city, 
                                              street, houseNumber);
            HttpRequest request = new HttpRequest();
            request.setHeader('SOAPAction', 'http://www.iconx.biz/webservices/submitOrder');
            request.setHeader('Content-Type', 'text/xml;charset=UTF-8');
            request.setBody(xmlBody);
            request.setTimeout(30000);
            request.setEndpoint(endpoint);
            request.setMethod('POST');
            return request;
        } catch (Exception e) {
            system.debug('Credit Factory Error === ' + e.getMessage());
            throw new CreditFactoryException('Order request failed. ' + CreditFactoryUtilities.CONTACT_ADMIN);
        }
    }


    /*******************************************************************************
    *  Name            : generateOrderXML(String userName, String password, String apiKey, String name
                                          String postalCode, String city, String street, String houseNumber)
    *  Summary         : generate XML String to call Coface order
    *  CreatedDate     : 29/06/2018
    *  ModifiedDate    : -
    *  Parameters      : String userName - Coface account name, String password - Coface password, 
                         String internal Id - Coface company internal Id, String vatNumber - company vat number, 
                         String companyName - company name, String postalCode - company postal code, 
                         String city - company city, String street - company city, String houseNumber - company house number
    *  Returns         : String
    ******************************************************************************/
    public static String generateOrderXML(String userName, String password, String internalId, String vatNumber, 
                                          String companyName, String postalCode, String city, String street, 
                                          String houseNumber) {
        String xmlBody = 
        '<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:web="http://www.iconx.biz/webservices">' +
            '<soapenv:Header>' +
                '<web:AuthHeader>' +
                    '<web:Username>' + userName + '</web:Username>' +
                    '<web:Password>' + password + '</web:Password>' +
                '</web:AuthHeader>' +
            '</soapenv:Header>' +
            '<soapenv:Body>' +
                '<web:submitOrder>' +
                    (internalId != null ? '<web:InternalID>' + internalId + '</web:InternalID>' : '') +
                    (vatNumber != null ? '<web:AdditionalIdentifiers>' +
                        '<web:CompanyIdentifier>' + 
                            '<web:Type>120</web:Type>' +
                            '<web:Description>VAT Number</web:Description>' + 
                            '<web:Identifier>' + vatNumber + '</web:Identifier>' +
                        '</web:CompanyIdentifier>' +
                    '</web:AdditionalIdentifiers>' : '') +
                    '<web:CompanyName>' + companyName + '</web:CompanyName>' +
                    '<web:Address>' +
                        '<web:Country>HU</web:Country>' +
                        (postalCode != null ? '<web:ZipCode>' + postalCode + '</web:ZipCode>' : '') +
                        (city != null ? '<web:City>' + city + '</web:City>' : '') +
                        (street != null ? '<web:AddressItem1>' + street + '</web:AddressItem1>' : '') +
                        (houseNumber != null ? '<web:AddressItem2>' + houseNumber + '</web:AddressItem2>' : '') +
                    '</web:Address>' +
                    '<web:DeliverySpeed>normal</web:DeliverySpeed>' +
                    '<web:Language>EN</web:Language>' +
                    '<ReportMimeType>text/xml</ReportMimeType>' +
                    '<web:ProductCode>200</web:ProductCode>' +
                    '<web:OrderOptions>Research_NoImmediate</web:OrderOptions>' +
                '</web:submitOrder>' +
            '</soapenv:Body>' +
        '</soapenv:Envelope>';
        return xmlbody;
    }


    /*******************************************************************************
    *  Name            : returnErrorMessage(Dom.XMLNode node) 
    *  Summary         : If response is invalid, then return error message.    
    *  CreatedDate     : 29/06/2018
    *  ModifiedDate    : -
    *  Parameters      : Dom.XMLNode node - body from response
    *  Returns         : String
    ******************************************************************************/
    public static String returnErrorMessage(Dom.XMLNode node) {
        for (Dom.XMLNode bodyField : node.getChildElements()) {
            if (bodyField.getName() == 'Fault') {
                for (Dom.XMLNode faultField : bodyField.getChildElements()) {
                    if (faultField.getName() == 'faultstring') {
                        return faultField.getText();
                    }
                }
            }
        }

        return null;        
    }

    /*******************************************************************************
    *  Name            : returnOrderReferenceNumber(Dom.XMLNode node)
    *  Summary         : Return order reference number.    
    *  CreatedDate     : 29/06/2018
    *  ModifiedDate    : -
    *  Parameters      : Dom.XMLNode node - body from response
    *  Returns         : String
    ******************************************************************************/
    public static String returnOrderReferenceNumber(Dom.XMLNode node) {
        for (Dom.XMLNode bodyField : node.getChildElements()) {
            if (bodyField.getName() == 'submitOrderResponse') {
                for (Dom.XMLNode responseField : bodyField.getChildElements()) {
                    if (responseField.getName() == 'submitOrderResult') {
                        for (Dom.XMLNode resultField : responseField.getChildElements()) {
                            if (resultField.getName() == 'OrderStatus') {
                                for (Dom.XMLNode statusField : resultField.getChildElements()) {
                                    if (statusField.getName() == 'ProviderOrderReference') {
                                        return statusField.getText();
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }

        return null;
    }


    /*******************************************************************************
    *  Name            : returnPartyId(Dom.XMLNode)
    *  Summary         : Return order party Id
    *  CreatedDate     : 29/06/2018
    *  ModifiedDate    : -
    *  Parameters      : Dom.XMLNode node - body from response
    *  Returns         : String
    ******************************************************************************/
    public static String returnPartyId(Dom.XMLNode node) {
        for (Dom.XMLNode bodyField : node.getChildElements()) {
            if (bodyField.getName() == 'submitOrderResponse') {
                for (Dom.XMLNode responseField : bodyField.getChildElements()) {
                    if (responseField.getName() == 'submitOrderResult') {
                        for (Dom.XMLNode resultField : responseField.getChildElements()) {
                            if (resultField.getName() == 'OrderStatus') {
                                for (Dom.XMLNode statusField : resultField.getChildElements()) {
                                    if (statusField.getName() == 'Provider') {
                                        for (Dom.XMLNode providerField : statusField.getChildElements()) {
                                            if (providerField.getName() == 'PartyID') {
                                                return providerField.getText();
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }

        return null;
    }


    /*******************************************************************************
    *  Name            : generateOrderStatusrequest(String endpoint, String userName, String password, String partyId, String referenceNumber)
    *  Summary         : Generate Order HTTP Request to Coface    
    *  CreatedDate     : 29/06/2018
    *  ModifiedDate    : -
    *  Parameters      : String endpoint - endpoint url, String userName - Coface account name, 
                         String password - Coface password, String partyId - order party Id, 
                         String referenceNumber - order reference number
    *  Returns         : HttpRequest
    ******************************************************************************/
    public static HttpRequest generateOrderStatusrequest(String endpoint, String userName, String password, String partyId, String referenceNumber) {
        try {
            String xmlBody = generateOrderStatusXML(userName, password, partyId, referenceNumber);
            HttpRequest request = new HttpRequest();
            request.setHeader('SOAPAction', 'http://www.iconx.biz/webservices/getOrderStatus');
            request.setHeader('Content-Type', 'text/xml;charset=UTF-8');
            request.setBody(xmlBody);
            request.setTimeout(30000);
            request.setEndpoint(endpoint);
            request.setMethod('POST');
            return request;
        } catch (Exception e) {
            system.debug('Credit Factory Error === ' + e.getMessage());
            throw new CreditFactoryException('Order binary request failed. ' + CreditFactoryUtilities.CONTACT_ADMIN);
        }
    }


    /*******************************************************************************
    *  Name            : generateOrderStatusXML(String userName, String password, String partyId, String referenceNumber)
    *  Summary         : Generate XML String to check order status.
    *  CreatedDate     : 29/06/2018
    *  ModifiedDate    : -
    *  Parameters      : String userName - Coface account name, String password - Coface password, 
                         String partyId - order party Id, String referenceNumber - order reference number
    *  Returns         : String
    ******************************************************************************/
    public static String generateOrderStatusXML(String userName, String password, String partyId, String referenceNumber) {
        String xmlBody = 
        '<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:web="http://www.iconx.biz/webservices">' +
            '<soapenv:Header>' +
                '<web:AuthHeader>' +
                    '<web:Username>' + userName + '</web:Username>' +
                    '<web:Password>' + password + '</web:Password>' +
                '</web:AuthHeader>' +
            '</soapenv:Header>' +
            '<soapenv:Body>' +
                '<web:getOrderStatus>' +
                    '<web:ProviderPartyID>' + partyId + '</web:ProviderPartyID>' +
                    '<web:ProviderOrderReference>' + referenceNumber + '</web:ProviderOrderReference>' +
                '</web:getOrderStatus>' +
            '</soapenv:Body>' +
        '</soapenv:Envelope>';
        return xmlbody;
    }


    /*******************************************************************************
    *  Name            : returnOrderStatus(Dom.XMLNode)
    *  Summary         : Return Order Status
    *  CreatedDate     : 29/06/2018
    *  ModifiedDate    : -
    *  Parameters      : Dom.XMLNode node - body from response
    *  Returns         : String
    ******************************************************************************/
    public static String returnOrderStatus(Dom.XMLNode node) {
        for (Dom.XMLNode bodyField : node.getChildElements()) {
            if (bodyField.getName() == 'getOrderStatusResponse') {
                for (Dom.XMLNode responseField : bodyField.getChildElements()) {
                    if (responseField.getName() == 'getOrderStatusResult') {
                        for (Dom.XMLNode resultField : responseField.getChildElements()) {
                            if (resultField.getName() == 'OrderStatus') {
                                for (Dom.XMLNode statusField : resultField.getChildElements()) {
                                    if (statusField.getName() == 'StatusCode') {
                                        return statusField.getText();
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }

        return null;
    }


    /*******************************************************************************
    *  Name            : generateOrderedReportRequest(String endpoint, String userName, String password, String partyId, String referenceNumber)
    *  Summary         : Generate Order HTTP Request to Coface    
    *  CreatedDate     : 29/06/2018
    *  ModifiedDate    : -
    *  Parameters      : String endpoint - endpoint url, String userName - Coface account name, 
                         String password - Coface password, String partyId - order party Id, 
                         String referenceNumber - order reference number
    *  Returns         : HttpRequest
    ******************************************************************************/
    public static HttpRequest generateOrderedReportRequest(String endpoint, String userName, String password, String partyId, String referenceNumber) {
        try {
            String xmlBody = generateOrderedReportXML(userName, password, partyId, referenceNumber);
            HttpRequest request = new HttpRequest();
            request.setHeader('SOAPAction', 'http://www.iconx.biz/webservices/getCompanyReport');
            request.setHeader('Content-Type', 'text/xml;charset=UTF-8');
            request.setBody(xmlBody);
            request.setTimeout(30000);
            request.setEndpoint(endpoint);
            request.setMethod('POST');
            return request;
        } catch (Exception e) {
            system.debug('Credit Factory Error === ' + e.getMessage());
            throw new CreditFactoryException('Order binary request failed. ' + CreditFactoryUtilities.CONTACT_ADMIN);
        }
    }


    /*******************************************************************************
    *  Name            : generateOrderedReportXML(String userName, String password, String partyId, String referenceNumber)
    *  Summary         : Generate XML String to get ordered report.
    *  CreatedDate     : 29/06/2018
    *  ModifiedDate    : -
    *  Parameters      : String userName - Coface account name, String password - Coface password, 
                         String partyId - order party Id, String referenceNumber - order reference number
    *  Returns         : String
    ******************************************************************************/
    public static String generateOrderedReportXML(String userName, String password, String partyId, String referenceNumber) {
        String xmlBody = 
        '<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:web="http://www.iconx.biz/webservices">' +
            '<soapenv:Header>' +
                '<web:AuthHeader>' +
                    '<web:Username>' + userName + '</web:Username>' +
                    '<web:Password>' + password + '</web:Password>' +
                '</web:AuthHeader>' +
            '</soapenv:Header>' +
            '<soapenv:Body>' +
                '<web:getCompanyReport>' +
                    '<web:ProviderPartyID>' + partyId + '</web:ProviderPartyID>' +
                    '<web:ProviderOrderReference>' + referenceNumber + '</web:ProviderOrderReference>' +
                '</web:getCompanyReport>' +
            '</soapenv:Body>' +
        '</soapenv:Envelope>';
        return xmlbody;
    }


    /*******************************************************************************
    *  Name            : returnInternalId(Dom.XMLNode node)
    *  Summary         : Return Coface internal Id.    
    *  CreatedDate     : 29/06/2018
    *  ModifiedDate    : -
    *  Parameters      : Dom.XMLNode node - body from response
    *  Returns         : String
    ******************************************************************************/
    public static String returnInternalId(Dom.XMLNode node) {
        for (Dom.XMLNode bodyField : node.getChildElements()) {
            if (bodyField.getName() == 'getCompanyReportResponse') {
                for (Dom.XMLNode responseField : bodyField.getChildElements()) {
                    if (responseField.getName() == 'getCompanyReportResult') {
                        for (Dom.XMLNode resultField : responseField.getChildElements()) {
                            if (resultField.getName() == 'Report') {
                                for (Dom.XMLNode reportField : resultField.getChildElements()) {
                                    if (reportField.getName() == 'Company') {
                                        for (Dom.XMLNode companyField : reportField.getChildElements()) {
                                            if (companyField.getName() == 'InternalID') {
                                                return companyField.getText();
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }

        return null;
    }


    /*******************************************************************************
    *  Name            : getOrderedBinaryAttachment(String xmlBody)
    *  Summary         : Return ordered report in Blob     
    *  CreatedDate     : 28/06/2018
    *  ModifiedDate    : -
    *  Parameters      : Dom.XMLNode node - body from response
    *  Returns         : Blob
    ******************************************************************************/
    public static Blob getOrderedBinaryAttachment(Dom.XMLNode node) {
        for (Dom.XMLNode bodyField : node.getChildElements()) {
            if (bodyField.getName() == 'immediateOrderResponse') {
                for (Dom.XMLNode responseField : bodyField.getChildElements()) {
                    if (responseField.getName() == 'immediateOrderResult') {
                        for (Dom.XMLNode resultField : responseField.getChildElements()) {
                            if (resultField.getName() == 'Report') {
                                for (Dom.XMLNode reportField : resultField.getChildElements()) {
                                    if (reportField.getName() == 'ReportBinary') {
                                        return EncodingUtil.base64Decode(reportField.getText());
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }

        return null;
    }


    public static Map<String, String> countriesMapping = new Map<String, String>{
        'HU' => 'HU'
    };
}
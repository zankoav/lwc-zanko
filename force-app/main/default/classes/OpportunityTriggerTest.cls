@isTest
private class OpportunityTriggerTest {
    @isTest
    private static void sendNotificationEmail() {
        Account newAccount = new Account(
            Name = 'test',
            BillingCountry = 'Germany');
        insert newAccount;

        Email_Notifications__c notification = new Email_Notifications__c(
            Name = 'Opportunity Welcome Letters',
            Email__c = 'test@test.com',
            Enabled__c = true);
        insert notification;

        BackOffice_Notifications__c customSettings = new BackOffice_Notifications__c(
            Name = 'Germany',
            Email__c = 'test@test.com',
            Active__c = true);
        insert customSettings;

        String recId = [
            SELECT Id
            FROM RecordType
            WHERE Name = 'Euroshell' AND SobjectType = 'Opportunity' LIMIT 1].Id;

        Opportunity newOpp = new Opportunity(
            RecordTypeId = recId,
            Anzahl_der_Karten__c = 5,
            Zahlungsart__c = 'Lastschrift',
            Zahlungsziel__c = '7',
            Product__c = 'None',
            StageName = 'CreditCheck',
            Name = 'test opp',
            Angebotsdauer__c = '3 Monate',
            CloseDate = Date.today(),
            AccountId = newAccount.Id);
        insert newOpp;

        Contact con = new Contact(
            FirstName = 'conName',
            LastName = 'conFamily',
            Email = 'test@example.com',
            Salutation = 'Her',
            AccountId = newAccount.Id);
        insert con;

        OpportunityContactRole testRole = new OpportunityContactRole(
            ContactId = con.Id,
            OpportunityId = newOpp.Id,
            isPrimary = true);
        insert testRole;

        newOpp.StageName = 'Closed Won';
        update newOpp;

        List<Task> testTaskList = [
                SELECT Subject
                FROM Task
                WHERE (Subject = 'Email: Welcome Email Sent' OR Subject = 'SENT: Email about new Customer was sent to Back Office') AND WhatId = :newOpp.Id];
        system.assertEquals(2, testTaskList.size());
    }


    /*******************************************************************************
    *  Name            : e2eCardsOwnerChangeTest
    *  Summary         : Test owner id in card after changing owner in the e2e opportunity      
    *  CreatedDate     : 23/01/2019
    *  ModifiedDate    : 
    *  Parameters      : -
    *  Returns         : void
    ******************************************************************************/
    @isTest
    public static void e2eCardsOwnerChangeTest() {
        Account account = new Account(Name ='Test');
        insert account;

        Contact contact = new Contact(
            Salutation = 'Herr',
            LastName = 'Test',
            AccountId = account.Id,
            Email = 'test123123@test.com'
        );
        insert contact;

        List<RecordType> rtList = [
                SELECT Id
                FROM RecordType
                WHERE Name = 'Euroshell' AND SobjectType = 'Opportunity'
                LIMIT 1];

        Opportunity opportunity = new Opportunity(
            Name = 'Test',
            StageName = 'Follow up',
            E2E__c = true,
            AccountID = account.Id,
            CloseDate = date.today().addMonths(1),
            Product__c = 'Home Station offer (v.1)',
            Angebotsdauer__c = '3 Monate',
            RecordTypeId = rtList.get(0).Id,
            Credit_check_date__c = date.today().addMonths(-4)
        );
        insert opportunity;

        Tankkarten__c tankkarten = new Tankkarten__c(
            Opportunity__c = opportunity.Id,
            Gewuenschter_Kartentyp__c = 'Single Network Card -- National',
            Produktbezugskategorie__c = '0 Diesel, Tunnel-, Maut- und Fährgebühren'
        );
        insert tankkarten;        

        User testUser = [SELECT Id FROM User WHERE Id != :UserInfo.getUserId() AND Profile.Name = 'Sales Inbound' LIMIT 1];

        opportunity.OwnerId = testUser.Id;
        update opportunity;

        Tankkarten__c testtankkarten = [SELECT OwnerId FROM Tankkarten__c WHERE Opportunity__c = :opportunity.Id LIMIT 1];

        System.assert(testtankkarten.OwnerId == testUser.Id);
    }


    /*******************************************************************************
    *  Name            : updateVouchersSentFieldTest()
    *  Summary         : after Opportunity StageName changes to "Closed Won" of update Vouchers Sent Field (increased by 1) in partner Account
    *  CreatedDate     : 18/01/2017
    *  Parameters      : -
    *  Returns         : void
    ******************************************************************************/
    @isTest
    public static void updateVouchersSentFieldTest() {

        RecordType rt = [SELECT Id FROM RecordType WHERE Sobjecttype = 'Account' AND Name = 'Retailer'];
        Account partnerAccount = new Account(
            Name = 'test',
            GFN_Nr__c  = '123',
            RecordTypeId = rt.Id,
            Type = 'Customer',
            Bundesland__c = 'Austria',
            Beschaeftigte__c = '1-4',
            Strasse_E__c = 'test',
            Hausnummer_E__c = 'test',
            PLZ_E__c = 'test',
            Ort_E__c = 'tet',
            Land_E__c = 'DE',
            OBN__c = 'test',
            Name_Zahlungspflichtigen_Kontoinhaber__c = 'test',
            Strasse_und_Hausnummer__c = 'tes',
            PLZ_und_Ort__c = 'test',
            IBAN_des_Zahlungspflichtigen__c = 'tes',
            SWIFT_BIC__c = 'test',
            Land__c = 'test land',
            Vouchers_Sent__c = 0,
            Gruende_fuer_Tankkarten__c = 'vereinfachte Abrechnung',
            Kraftstoffverbrauch_Liter_Monat__c = 2);
        insert partnerAccount;


        Lead newLead = new Lead(
            Country = 'Germany',
            Company = 'test company',
            Salutation = 'Herr',
            Anzahl_der_Karten_Euroshell__c = 'test',
            Anzahl_der_Fahrzeuge__c = 2,
            FirstName = 'testName',
            LastName = 'testFam',
            Sec_Channel__c = 'Inbound',
            Phone = '3333333',
            LeadSource = 'Internet',
            Quali_Status__c = 'Refused to talk',
            Branche_NACE__c = 'Apotheken - 4773',
            Beschaeftigte__c = '1-4',
            Partner__c = partnerAccount.Id,
            Partner_OBN__c = 'test',
            Disable_for_KPI__c = FALSE
            );
        insert newLead;

        Email_Notifications__c notification = new Email_Notifications__c(
            Name = 'Opportunity Welcome Letters',
            Email__c = 'test@test.com',
            Enabled__c = true);
        insert notification;

        BackOffice_Notifications__c customSettings = new BackOffice_Notifications__c(
            Name = 'Germany',
            Email__c = 'test@test.com',
            Active__c = true);
        insert customSettings;

        Database.LeadConvert lc = new Database.LeadConvert();
        lc.setLeadId(newLead.id);

        LeadStatus convertStatus = [SELECT Id, MasterLabel FROM LeadStatus WHERE IsConverted=true LIMIT 1];
        lc.setConvertedStatus(convertStatus.MasterLabel);
        Database.LeadConvertResult lcr = Database.convertLead(lc);

        String newOppId = [SELECT ConvertedOpportunityId FROM Lead WHERE Id = :newLead.Id].ConvertedOpportunityId;

        Opportunity convOpp = [
                SELECT Name, StageName, Herkunft_Land__c, Angebotsdauer__c, Kraftstoffverbrauch_Liter_Monat__c, Anzahl_der_Karten__c, Derzeitige_Zahlungsmethode__c,
                Kundensegment__c, Zahlungsart__c, Zahlungsziel__c, CloseDate, Last_Owner_Change_Date__c
                FROM Opportunity
                WHERE Id = :newOppId];

        convOpp.StageName = 'Closed Won';
        convOpp.Angebotsdauer__c = '3 Monate';
        convOpp.CloseDate = Date.today();
        update convOpp;

        List<Account> testAccountsList = [
                SELECT Name
                FROM Account
                WHERE Vouchers_Sent__c != 0];
        System.assertEquals(testAccountsList.size(), 1);
    }


    /*******************************************************************************
    *  Name            : testSendToFleetmatics()
    *  Summary         : test send email to addresses from custom setting when fleetmatics lead is closed and won
    *  CreatedDate     : 12/06/2017
    *  Parameters      : -
    *  Returns         : void
    ******************************************************************************/
    @isTest
    private static void testSendToFleetmatics() {
        Account account = new Account(
            Name = 'test');
        insert account;
        Opportunity opportunity = new Opportunity(
            AccountId = account.Id,
            Name = 'test',
            StageName = 'Prospecting',
            CloseDate = Date.today(),
            Angebotsdauer__c = '3 Monate',
            LeadSource = 'Fleetmatics_new');
        insert opportunity;
        Fleetmatics_Notifications__c notification = new Fleetmatics_Notifications__c(
            Name = 'test',
            Email__c = 'test@test.com',
            Active__c = true);
        insert notification;
        opportunity.StageName = 'Closed Won';
        update opportunity;
        System.assertEquals(2, Limits.getEmailInvocations());
    }


    /*******************************************************************************
    *  Name            : changeToClosedWonAfterPendingSepaTest()
    *  Summary         : test change opportunity stage name from Pending Sales - SEPA Confirmation(exposed by Credit Factory) to Closed Won
    *  CreatedDate     : 14/08/2017
    *  Parameters      : -
    *  Returns         : void
    ******************************************************************************/
    @isTest
    private static void changeToClosedWonAfterPendingSepaTest() {
        Account account = new Account(
            Name = 'test');
        insert account;

        Opportunity opportunity = new Opportunity(
            AccountId = account.Id,
            Name = 'test',
            StageName = 'Pending Sales - SEPA Confirmation',
            Zahlungsart__c = 'Lastschrift',
            CloseDate = Date.today(),
            Angebotsdauer__c = '3 Monate',
            Send_SEPA_approval_link__c = true);
        insert opportunity;

        opportunity.SEPA_Request_Approved__c = true;
        Test.startTest();
        update opportunity;
        Test.stopTest();

        List<Opportunity> opportunitiesList = [
                SELECT StageName
                FROM Opportunity
                WHERE Id = :opportunity.Id];

        System.assertEquals(opportunitiesList.get(0).StageName, 'Closed Won');
    }


    /*******************************************************************************
    *  Name            : updatePaymentMethodSEPAApprovedTest()
    *  Summary         : test update Payment method when SEPA request approved
    *  CreatedDate     : 19/08/2017
    *  Parameters      : -
    *  Returns         : void
    ******************************************************************************/
    @isTest
    private static void updatePaymentMethodSEPAApprovedTest() {
        Account account = new Account(
            Name = 'test');
        insert account;

        Opportunity opportunity = new Opportunity(
            AccountId = account.Id,
            Name = 'test',
            StageName = 'Prospecting',
            CloseDate = Date.today(),
            Angebotsdauer__c = '3 Monate',
            Send_SEPA_approval_link__c = true);
        insert opportunity;

        opportunity.SEPA_Request_Approved__c = true;
        Test.startTest();
        update opportunity;
        Test.stopTest();

        List<Opportunity> opportunitiesList = [
                SELECT Zahlungsart__c
                FROM Opportunity
                WHERE Id = :opportunity.Id];

        System.assertEquals(opportunitiesList.get(0).Zahlungsart__c, 'Lastschrift');
    }


    /*******************************************************************************
    *  Name            : updateStartsPaymentMethodSEPAApprovedTest()
    *  Summary         : test update Starts: Payment method when SEPA request approved
    *  CreatedDate     : 14/08/2017
    *  Parameters      : -
    *  Returns         : void
    ******************************************************************************/
    @isTest
    private static void updateStartsPaymentMethodSEPAApprovedTest() {
        Account account = new Account(
            Name = 'test');
        insert account;

        Opportunity opportunity = new Opportunity(
            AccountId = account.Id,
            Name = 'test',
            StageName = 'Closed Won',
            CloseDate = Date.today(),
            Angebotsdauer__c = '3 Monate',
            Send_SEPA_approval_link__c = true);
        insert opportunity;

        opportunity.SEPA_Request_Approved__c = true;
        Test.startTest();
        update opportunity;
        Test.stopTest();

        List<Opportunity> opportunitiesList = [
                SELECT Starts_Payment_method__c
                FROM Opportunity
                WHERE Id = :opportunity.Id];

        System.assertEquals(opportunitiesList.get(0).Starts_Payment_method__c, 'Direct debit');
    }


    /*******************************************************************************
    *  Name            : updateCFStageClosedWonTest()
    *  Summary         : test setting CF Stage to Auto CW when Stage is set to Closed Won
    *  CreatedDate     : 31/01/2018
    *  ModifiedDate    : 31/01/2018
    *  Parameters      : -
    *  Returns         : void
    ******************************************************************************/
    @isTest
    private static void updateCFStageClosedWonTest() {
        Account account = new Account(
            Name = 'test');
        insert account;

        Opportunity opportunity = new Opportunity(
            AccountId = account.Id,
            Name = 'test',
            StageName = 'Pending Credit - Contract Check',
            CloseDate = Date.today(),
            Angebotsdauer__c = '3 Monate',
            Send_SEPA_approval_link__c = true);
        insert opportunity;

        opportunity.StageName = 'Closed Won';

        Test.startTest();
            update opportunity;
        Test.stopTest();

        List<Opportunity> opportunitiesList = [
                SELECT CF_Stage__c, Closed_Won_by_CF__c
                FROM Opportunity
                WHERE Id = :opportunity.Id];

        System.assertEquals('Auto CW', opportunitiesList.get(0).CF_Stage__c);
        System.assertEquals(true, opportunitiesList.get(0).Closed_Won_by_CF__c);
    }


    /*******************************************************************************
    *  Name            : updateStartsFieldsAfterClosedWonTest()
    *  Summary         : check fields update when opportunity is Closed to Won
    *  CreatedDate     : 3/09/2017
    *  ModifiedDate    : 3/09/2017
    *  Parameters      : -
    *  Returns         : void
    ******************************************************************************/
  @isTest
    private static void updateStartsFieldsAfterClosedWonTest() {
        RecordType recordType = [
                SELECT Id
                FROM RecordType
                WHERE Name = 'Euroshell' AND SObjectType = 'Opportunity'];

        Account account = new Account(
            Name = 'test');
        insert account;

        Opportunity opportunity = new Opportunity(
            AccountId = account.Id,
            RecordTypeId = recordType.Id,
            Name = 'test',
            StageName = 'Prospecting',
            Angebotsdauer__c = '3 Monate',
            Anzahl_der_Karten__c = 3,
            CloseDate = Date.newInstance(2017, 03, 09));
        insert opportunity;

        opportunity.StageName = 'Closed Won';
        Test.startTest();
            update opportunity;
        Test.stopTest();

        Opportunity testOpportunity = [
                SELECT Starts_Schedule__c, Starts_Status_Delay__c, Starts_Number_of_Cards_Target__c, Starts_Status__c
                FROM Opportunity
                WHERE Id = :opportunity.Id];
        System.assertEquals(testOpportunity.Starts_Schedule__c, Date.newInstance(2017, 03, 10));
        System.assertEquals(testOpportunity.Starts_Status_Delay__c, false);
        System.assertEquals(testOpportunity.Starts_Number_of_Cards_Target__c, 3);
        System.assertEquals(testOpportunity.Starts_Status__c, '0. Request received');
    }


    /*******************************************************************************
    *  Name            : startsSLAcalculateTest()
    *  Summary         : check fields update when opportunity is Closed to Won
    *  CreatedDate     : 16/10/2017
    *  Parameters      : -
    *  Returns         : void
    ******************************************************************************/
    @isTest
    private static void startsSLAcalculateTest() {
        Opportunity opportunity = new Opportunity(
            Name = 'test',
            StageName = 'Closed Won',
            Angebotsdauer__c = '3 Monate',
            Anzahl_der_Karten__c = 3,
            Starts_Overdue_days__c = 2,
            Starts_Sales_Completed_Update__c = true,
            CloseDate = Date.today());
        insert opportunity;

        Test.startTest();
            opportunity.Starts_Status__c = '0.5 Missing information';
            update opportunity;
        Test.stopTest();
    }

    /*******************************************************************************
    *  Name            : testLastDateChangeOwnerRUS()
    *  Summary         : check for change of field Last_Owner_Change_Date_RUS__c when changing owner
    *  CreatedDate     : 20/11/2017
    *  Parameters      : -
    *  Returns         : void
    ******************************************************************************/
    @isTest
    private static void testLastDateChangeOwnerRUS() {
        Profile p = [
                SELECT Id
                FROM Profile
                WHERE Name = 'System Administrator'];

        User user = new User(
            Username = 'usertest@fleetcor.de',
            ProfileId = p.Id,
            Alias = 'uset@fl',
            Email = 'usertest@fleetcor.de',
            EmailEncodingKey = 'UTF-8',
            Lastname = 'usertest',
            LanguageLocaleKey = 'en_US',
            LocaleSidKey = 'en_US',
            TimeZoneSidKey = 'America/Chicago');
        insert user;
        User user2 = new User(
            Username = 'usertest2@fleetcor.de',
            ProfileId = p.Id,
            Alias = 'uset2@fl',
            Email = 'usertest2@fleetcor.de',
            EmailEncodingKey = 'UTF-8',
            Lastname = 'usertest2',
            LanguageLocaleKey = 'en_US',
            LocaleSidKey = 'en_US',
            TimeZoneSidKey = 'America/Chicago');
        insert user2;

        Account account = new Account(Name = 'testt');
        insert account;

        Id recordTypeId;
        if (Schema.SObjectType.Opportunity.getRecordTypeInfosByName().get('Российские продажи') != null) {
            recordTypeId = Schema.SObjectType.Opportunity.getRecordTypeInfosByName().get(
                    'Российские продажи').getRecordTypeId();
        } else if (Schema.SObjectType.Opportunity.getRecordTypeInfosByName().get('Russian Sales') != null) {
            recordTypeId =
                    Schema.SObjectType.Opportunity.getRecordTypeInfosByName().get('Russian Sales').getRecordTypeId();
        }

        Opportunity opportunity = new Opportunity(
            Name = 'testt',
            AccountId = account.Id,
            StageName = 'Closed Won',
            CloseDate = Date.today() - 1,
            Angebotsdauer__c = '3 months',
            OwnerId = user.Id,
            RecordTypeId = recordTypeId
        );
        insert opportunity;
        Opportunity testOpportunity = [SELECT Last_Owner_Change_Date_RUS__c
                FROM Opportunity
                WHERE Name = 'testt'];
        System.assertEquals(testOpportunity.Last_Owner_Change_Date_RUS__c.date(), Datetime.now().date());
    }


    /*******************************************************************************
    *  Name            : testSendingReportToGfnAfterStartsStatusChanged()
    *  Summary         : check for change of field Starts_Status__c and send report to GFN
    *  CreatedDate     : 30/11/2017
    *  Parameters      : -
    *  Returns         : void
    ******************************************************************************/
    @isTest
    private static void testSendingReportToGfnAfterStartsStatusChanged() {

        Profile profile = [
                SELECT Id
                FROM Profile
                WHERE name = 'E2E Profile'
                LIMIT 1];

        User user = new User(
                ProfileId = profile.Id,
                Username = 'usertest' + System.now().millisecond() + '@fleetcor.de',
                Alias = 'test',
                Email = 'test@fleetcor.de',
                Country = 'Germany',
                CountryCode = 'DE',
                EmailEncodingKey = 'UTF-8',
                LastName = 'test',
                LanguageLocaleKey = 'en_US',
                LocaleSidKey = 'en_US',
                TimeZoneSidKey = 'America/Chicago');
        insert user;

        GFNI_General_Settings__c customSetting = new GFNI_General_Settings__c();
        customSetting.Name = 'DE';
        customSetting.Application_Status__c = '/applicationstatus';
        customSetting.Create_Customer_and_Cards__c = '/customer';
        customSetting.Get_Customer_Id__c = '/customerId';
        customSetting.IsForRobot__c = true;
        customSetting.Number_Of_Send_Tries__c = 3;
        customSetting.Prod_Endpoint__c = 'https://api-fleetcor-eu.apiconnect.ibmcloud.com/fleetcor-eu/sb';
        customSetting.Test_Endpoint__c = 'https://api-fleetcor-eu.apiconnect.ibmcloud.com/fleetcor-eu/sb';
        customSetting.x_ibm_client_id__c = '49a8caea-2a51-4172-b387-c102be154f6f';
        customSetting.x_ibm_client_secret__c = 'eB8xT3aH6yY3rL4oO8fQ2sG2aJ5pL8rS4tD6kB0hU4kM4pS5fE';
        customSetting.Support_email__c = 'test@email.com';
        customSetting.Test_support_email__c = 'test@test.com';
        customSetting.test_x_ibm_client_id__c = '49a8caea-2a51-4172-b387-c102be154f6f';
        customSetting.test_x_ibm_client_secret__c = 'eB8xT3aH6yY3rL4oO8fQ2sG2aJ5pL8rS4tD6kB0hU4kM4pS5fE';
        customSetting.Test_mode__c = true;
        insert customSetting;        

        System.runAs(user){
            Account_GFN_Report_Email_Params__c customSettings = new Account_GFN_Report_Email_Params__c(
                Name = 'Excel',
                Attach_format__c = '.xls',
                Email__c = 'test_robot_email@test.ru',
                Email_body__c = 'Attached file is generated using Salesforce for a robot processing',
                Test_mode__c = true,
                Test_mode_email__c = 'test_robot@test.ru');
            insert customSettings;

            List<RecordType> recordTypes = [
                    SELECT Id
                    FROM RecordType
                    WHERE (Name = 'Euroshell Starts' OR Name = 'Euroshell') AND sObjectType = 'Opportunity'
                    LIMIT 2];

            Account account = new Account(
                Type = 'Customer',
                Name = 'Test Account for GFN Report',
                Gesellschaftsform__c = 'Gewerbebetrieb', // company form
                Steuernummer__c = '3222831067', // tax id
                HR_Abteilung_HRA_HRB_und_HR_Nummer__c = '1111.222.333', // trade Register Number
                Umsatzsteuer_ID__c = 'DE299022282',
                BillingCountry = 'Germany',
                BillingState = 'Rhineland-Palatinate',
                BillingCity = 'LUDWIGSHAFEN',
                BillingPostalCode = '66666',
                BillingStreet = 'KASTANIENSTR. 12',
                ShippingCountry = 'Germany',
                ShippingState = 'Rhineland-Palatinate',
                ShippingCity = 'LUDWIGSHAFEN',
                ShippingPostalCode = '66666',
                ShippingStreet = 'KASTANIENSTR. 12');
            insert account;

            Opportunity opportunity = new Opportunity(
                AccountId = account.Id,
                Name = 'Test Opportunity for GFN Report',
                Sec_Channel__c = 'Inbound',
                Language_Preference__c = 'German',
                SWIFT_BIC__c = 'AABBCCFFXXX',
                IBAN__c = 'DE28200444000612222222',
                Credit_System_Number__c = '2155548666',
                Product__c = 'Home Station offer (v.1)',
                Angebotsdauer__c = '6 Monate',
                ESI__c = '0233',
                Total_number_of_vehicles__c = 12,
                Total_consumption_l_month__c = 1200,
                Zahlungsart__c = 'Lastschrift',
                CurrencyIsoCode = 'EUR',
                Zahlungsziel_Credit__c = '7',
                Risk_Category__c = 'Low',
                Rechnungsperiode__c = '30',
                e_Invoicing_PDF__c = false,
                Papierrechnung__c = false,
                bearbeitet_von__c = 'Somebody Else',
                Credit_System_Rating__c = '1',
                Garantie__c = 'keine',
                Garantie_other__c = 2000,
                Eco_Fee__c = false,
                StageName = 'Prospecting',
                CloseDate = date.today().addMonths(1),
                Starts_Status__c = '0. Request received');
            insert opportunity;

            List<Contact> contacts = new List<Contact>();
            for (Integer i = 0; i < 5; i++) {
                Contact contact = new Contact(
                    Salutation = 'Herr',
                    FirstName = 'Test Contact First Name ' + i,
                    LastName = 'Test Contact Last Name ' + i,
                    MiddleName = '',
                    AccountId = account.Id,
                    Phone = '2223344' + i,
                    MobilePhone = '',
                    Fax = '',
                    Email = i + '_test_contac@test.com');
                contacts.add(contact);
            }
            insert contacts;

            List<OpportunityContactRole> contactRoles = new List<OpportunityContactRole>();
            for (Contact contact : contacts) {
                Integer count = 1;
                OpportunityContactRole role = new OpportunityContactRole(
                    ContactId = contact.Id,
                    IsPrimary = (count == 1) ? true : false,
                    OpportunityId = opportunity.Id,
                    Role = 'Decision Maker');
                contactRoles.add(role);
                count++;
            }
            insert contactRoles;

            List<Tankkarten__c> cards = new List<Tankkarten__c>();
            for (Integer i = 0; i < 5; i++) {
                Tankkarten__c card = new Tankkarten__c(
                    Account__c = account.Id,
                    Opportunity__c =  opportunity.Id,
                    Gewuenschter_Kartentyp__c = 'Multi Network Card -- National',
                    Produktbezugskategorie__c = '2 Kategorie 1 plus fahrzeugbezogene Waren und Dienstleistungen (Öle, Autowäsche)',
                    Fahrzeugtyp__c = 'PKW',
                    Firmenname_auf_der_Karte__c = 'FIRMENNAME AUF DER KARTE',
                    KFZ_Kennzeichen_oder_Fahrername__c = 'AA-AA 111' + i,
                    Driver_Name__c = 'DRIVER NAME ' + i,
                    Kilometerstand_Abfrage__c = true);
                cards.add(card);
            }
            insert cards;

            opportunity.Starts_Status__c = '0.9 Ready for GFN';
            Test.startTest();
            update opportunity;
            Test.stopTest();

            List<Mailing_Account_GFN_Report_Log__c> logs = [
                    SELECT Id, Account__c, Address__c, File_Name__c, Name, Opportunity__c, OwnerId, Sending_Status__c, Starts_Status_Changed_By__c
                    FROM Mailing_Account_GFN_Report_Log__c
                    WHERE Account__c = :account.Id
                    AND Opportunity__c = :opportunity.Id];

            System.assertEquals(1, logs.size());
        }
    }


    /******************************************************************************
    *  Name            :
    *  Summary         :
    *  CreatedDate     :
    *  ModifiedDate    :
    *  Parameters      :
    *  Returns         :
    ******************************************************************************/
    @isTest
    private static void sendTotalConsumptionChangeAlertTest() {
        Test.startTest();
            Profile saleRepProfile = [SELECT Id FROM Profile WHERE Name = 'Sales'];
            UserRole saleRepUsrRole = [SELECT Id FROM UserRole WHERE Name = 'Salesteam Inbound'];

            User saleRep = new User(
                ProfileId = saleRepProfile.Id,
                UserRoleId = saleRepUsrRole.Id,
                Username = 'SaleRep' + System.now().millisecond() + '@fleetcor.de',
                Alias = 'sr',
                Email = 'test@fleetcor.de',
                Country = 'Germany',
                CountryCode = 'DE',
                EmailEncodingKey = 'UTF-8',
                LastName = 'test',
                LanguageLocaleKey = 'en_US',
                LocaleSidKey = 'en_US',
                TimeZoneSidKey = 'America/Chicago');
            insert saleRep;

            Profile teamleadProfile = [SELECT Id FROM Profile WHERE Name = 'Salesteamleiter Inbound'];
            UserRole teamleadUsrRole = [SELECT Id FROM UserRole WHERE Name = 'Teamleiter Inbound'];

            User teamleader = new User(
                ProfileId = teamleadProfile.Id,
                UserRoleId = teamleadUsrRole.Id,
                Username = 'Teamlead' + System.now().millisecond() + '@fleetcor.de',
                Alias = 'tl',
                Email = 'test2@fleetcor.de',
                Country = 'Germany',
                CountryCode = 'DE',
                EmailEncodingKey = 'UTF-8',
                LastName = 'test',
                LanguageLocaleKey = 'en_US',
                LocaleSidKey = 'en_US',
                TimeZoneSidKey = 'America/Chicago');
            insert teamleader;

            System.runAs(saleRep) {
                Account account = new Account(Name = 'TEST');
                insert account;

                Id recordTypeId;
                if (Schema.SObjectType.Opportunity.getRecordTypeInfosByName().get('Euroshell') != null) {
                    recordTypeId = Schema.SObjectType.Opportunity.getRecordTypeInfosByName().get('Euroshell').getRecordTypeId();
                }
                Opportunity opportunity = new Opportunity(
                    Name = 'TEST',
                    AccountId = account.Id,
                    StageName = 'Prospecting',
                    CloseDate = Date.today() - 1,
                    Angebotsdauer__c = '3 months',
                    Total_consumption_l_month__c = 123,
                    OwnerId = saleRep.Id,
                    RecordTypeId = recordTypeId
                );
                insert opportunity;

                opportunity.Total_consumption_l_month__c = 321;
                update opportunity;

                opportunity.Total_consumption_l_month__c = 213;
                update opportunity;

                opportunity.Total_consumption_l_month__c = 312;
                update opportunity;
            }
        Test.stopTest();
    }

    /*******************************************************************************
   *  Name            : testsendRequestForChangeOwnerRu()
   *  Summary         : test testsendRequestForChangeOwnerRu
   *  CreatedDate     : 20/11/2017
   *  Parameters      : -
   *  Returns         : void
   ******************************************************************************/
    @isTest
    private static void testsendRequestForChangeOwnerRu() {
        Profile p = [
                SELECT Id
                FROM Profile
                WHERE Name = 'Russian Sales Manager'];

        User user2 = new User(
                Username = 'usertest2@fleetcor.de',
                ProfileId = p.Id,
                Alias = 'uset2@fl',
                Email = 'usertest2@fleetcor.de',
                EmailEncodingKey = 'UTF-8',
                Lastname = 'usertest2',
                LanguageLocaleKey = 'en_US',
                LocaleSidKey = 'en_US',
                TimeZoneSidKey = 'America/Chicago');
        insert user2;

        User user = new User(
                Username = 'usertest@fleetcor.de',
                ProfileId = p.Id,
                Alias = 'uset@fl',
                Email = 'usertest@fleetcor.de',
                EmailEncodingKey = 'UTF-8',
                Lastname = 'usertest',
                LanguageLocaleKey = 'en_US',
                LocaleSidKey = 'en_US',
                TimeZoneSidKey = 'America/Chicago',
                ManagerId = user2.id);
        insert user;

        User user3 = new User(
                Username = 'usertest3@fleetcor.de',
                ProfileId = p.Id,
                Alias = 'uset@fl',
                Email = 'usertest@fleetcor.de',
                EmailEncodingKey = 'UTF-8',
                Lastname = 'usertest',
                LanguageLocaleKey = 'en_US',
                LocaleSidKey = 'en_US',
                TimeZoneSidKey = 'America/Chicago');
        insert user3;

        system.runAs(user) {
            Account account = new Account(Name = 'testt',INN__c='1235312151');
            insert account;

            Id recordTypeId;
            if (Schema.SObjectType.Opportunity.getRecordTypeInfosByName().get('Российские продажи') != null) {
                recordTypeId = Schema.SObjectType.Opportunity.getRecordTypeInfosByName().get('Российские продажи').getRecordTypeId();
            } else if (Schema.SObjectType.Opportunity.getRecordTypeInfosByName().get('Russian Sales') != null) {
                recordTypeId = Schema.SObjectType.Opportunity.getRecordTypeInfosByName().get('Russian Sales').getRecordTypeId();
            }

            Opportunity opportunity = new Opportunity(
                    Name = 'testt',
                    AccountId = account.Id,
                    StageName = 'Qualified Lead',
                    CloseDate = Date.today() - 1,
                    Angebotsdauer__c = '3 months',
                    OwnerId = user.Id,
                    RecordTypeId = recordTypeId,
                    Source_of_Lead_o__c = 'Сайт petrolplus.ru'
            );
            insert opportunity;

            opportunity.ownerid = user3.id;
            update opportunity;

            Opportunity testOpportunity = [
                    SELECT OwnerId
                    FROM Opportunity
                    WHERE Name = 'testt'
            ];

            System.assertEquals(testOpportunity.OwnerId, user.id);
        }
    }

    /*******************************************************************************
   *  Name            : testsendRequestForCreateSecondOpportunity()
   *  Summary         : test sendRequestForCreateSecondOpportunity
   *  CreatedDate     : 20/11/2017
   *  Parameters      : -
   *  Returns         : void
   ******************************************************************************/
    @isTest
    private static void testsendRequestForCreateSecondOpportunity() {
        Profile p = [
                SELECT Id
                FROM Profile
                WHERE Name = 'Russian Sales Manager'];

        User user2 = new User(
                Username = 'usertest2@fleetcor.de',
                ProfileId = p.Id,
                Alias = 'uset2@fl',
                Email = 'usertest2@fleetcor.de',
                EmailEncodingKey = 'UTF-8',
                Lastname = 'usertest2',
                LanguageLocaleKey = 'en_US',
                LocaleSidKey = 'en_US',
                TimeZoneSidKey = 'America/Chicago');
        insert user2;

        User user = new User(
                Username = 'usertest@fleetcor.de',
                ProfileId = p.Id,
                Alias = 'uset@fl',
                Email = 'usertest@fleetcor.de',
                EmailEncodingKey = 'UTF-8',
                Lastname = 'usertest',
                LanguageLocaleKey = 'en_US',
                LocaleSidKey = 'en_US',
                TimeZoneSidKey = 'America/Chicago',
                ManagerId = user2.id);
        insert user;

        system.runAs(user) {
            Account account = new Account(Name = 'testt',INN__c='1235312155');
            insert account;

            Id recordTypeId;
            if (Schema.SObjectType.Opportunity.getRecordTypeInfosByName().get('Российские продажи') != null) {
                recordTypeId = Schema.SObjectType.Opportunity.getRecordTypeInfosByName().get(
                        'Российские продажи').getRecordTypeId();
            } else if (Schema.SObjectType.Opportunity.getRecordTypeInfosByName().get('Russian Sales') != null) {
                recordTypeId =
                        Schema.SObjectType.Opportunity.getRecordTypeInfosByName().get('Russian Sales').getRecordTypeId();
            }

            Opportunity opportunity = new Opportunity(
                    Name = 'testt',
                    AccountId = account.Id,
                    StageName = 'Qualified Lead',
                    CloseDate = Date.today() - 1,
                    Angebotsdauer__c = '3 months',
                    OwnerId = user.Id,
                    RecordTypeId = recordTypeId,
                    Source_of_Lead_o__c = 'Сайт petrolplus.ru'
            );
            insert opportunity;

            Opportunity opportunity2 = new Opportunity(
                    Name = 'testt2',
                    AccountId = account.Id,
                    StageName = 'Qualified Lead',
                    CloseDate = Date.today() - 1,
                    Angebotsdauer__c = '3 months',
                    OwnerId = user.Id,
                    RecordTypeId = recordTypeId,
                    Source_of_Lead_o__c = 'Сайт petrolplus.ru'
            );
            insert opportunity2;
        }

        Opportunity testOpportunity = [
                SELECT OwnerId
                FROM Opportunity
                WHERE Name = 'testt2'];

        System.assertEquals(testOpportunity.OwnerId, user2.id);
    }

    /*****************************************************************************************
   *  Name            : testCloseTasksAfterOpportunityClosed()
   *  Summary         : tests if Task's Status changes to 'Completed' after Opportunity's Status is changed to 'Closed Lost'
   *  CreatedDate     : 20/02/2018
   *  Parameters      : -
   *  Returns         : void
   *******************************************************************************************/
    @isTest
    private static void testCloseTasksAfterOpportunityClosed() {
        String accRecId = GlobalUtils.returnRecordTypeId('Account', 'Endkunde');
        String euroshellRecId = GlobalUtils.returnRecordTypeId('Opportunity', 'Euroshell');
        String taskRecId = GlobalUtils.returnRecordTypeId('Task', 'Layout Tasks');

        Account account = new Account(
                Name = 'TEST',
                AccountSource = 'ABVP',
                Type = 'Customer',
                Gesellschaftsform__c = 'AG',
                Beschaeftigte__c = '1-4',
                RecordTypeId = accRecId);
        insert account;

        Opportunity testOppo = new Opportunity(
                Name = 'TEST',
                AccountId = account.Id,
                Sec_Channel__c = 'JITB',
                LeadSource = 'ABVP',
                Type = 'Existing Business',
                Prio__c = 'A',
                StageName = 'Prospecting',
                Number_of_cars__c = 1,
                Number_of_trucks__c = 1,
                Total_number_of_vehicles__c = 2,
                Gasoline_consumption_l_month__c = 10,
                Diesel_consumption_l_month__c = 10,
                Total_consumption_l_month__c = 20,
                Number_of_Cards__c = 1,
                Derzeitige_Zahlungsmethode__c = 'Stationskarte',
                CloseDate = Date.today() - 1,
                RecordTypeId = euroshellRecId);
        insert testOppo;

        Task testTask = new Task(
                Status = 'In Bearbeitung',
                Type = 'Anruf',
                ActivityDate = Date.today(),
                Subject = 'test',
                WhatId = testOppo.Id,
                RecordTypeId = taskRecId);
        insert testTask;

        Test.startTest();
        testOppo.StageName = 'Closed Lost';
        OpportunityTriggerHandler.isOpportunityClosed = true;
        update testOppo;
        Test.stopTest();

        List<Task> testTasks = [SELECT Id FROM Task WHERE WhatId =: testOppo.Id AND Status = 'Completed'];
        System.assertEquals(1, testTasks.size());
    }


    /*******************************************************************************
    *  Name            : testAddSubjectsToCloneOpportunity()
    *  Summary         : test testAddSubjectsToCloneOpportunity()
    *  CreatedDate     : 23/02/2018
    *  ModifiedDate    : 16/05/2018
    *  Parameters      : -
    *  Returns         : void
    ******************************************************************************/
    @isTest
    private static void testAddSubjectsToCloneOpportunity() {
        Account account = new Account(Name ='Test');
        insert account;

        Contact contact = new Contact(
            Salutation = 'Herr',
            LastName = 'Test',
            AccountId = account.Id,
            Email = 'test123123@test.com'
        );
        insert contact;

        List<RecordType> rtList = [
                SELECT Id
                FROM RecordType
                WHERE Name = 'Euroshell' AND SobjectType = 'Opportunity'
                LIMIT 1];

        Opportunity opportunity = new Opportunity(
            Name = 'Test',
            StageName = 'Follow up',
            AccountID = account.Id,
            CloseDate = date.today().addMonths(1),
            Product__c = 'Home Station offer (v.1)',
            Angebotsdauer__c = '3 Monate',
            RecordTypeId = rtList.get(0).Id,
            Credit_check_date__c = date.today().addMonths(-4)
        );
        insert opportunity;

        Tankkarten__c tankkarten = new Tankkarten__c(
            Opportunity__c = opportunity.Id,
            Gewuenschter_Kartentyp__c = 'Single Network Card -- National',
            Produktbezugskategorie__c = '0 Diesel, Tunnel-, Maut- und Fährgebühren',
            KFZ_Kennzeichen_oder_Fahrername__c = 'test'
        );
        insert tankkarten;

        Attachment attachment = new Attachment(
            Name = 'CrefoReport.pdf',
            ParentId = opportunity.Id,
            Body = Blob.valueOf('test')
        );
        insert attachment;

        Attachment attachment2 = new Attachment(
            Name = 'test.pdf',
            ParentId = opportunity.Id,
            Body = Blob.valueOf('test')
        );
        insert attachment2;

        OpportunityContactRole ocr = new OpportunityContactRole(
            ContactId = contact.Id,
            OpportunityId = opportunity.Id,
            IsPrimary = true,
            Role = 'Business User'
        );
        insert ocr;

        Opportunity cloneOpp = opportunity.clone();
        insert cloneOpp;

        List<Attachment> attachList = [SELECT Id FROM Attachment WHERE ParentId = :cloneOpp.Id];
        List<Tankkarten__c> tankkartenList = [SELECT Id FROM Tankkarten__c WHERE Opportunity__c = :cloneOpp.Id];
        List<OpportunityContactRole> oppConRoleLost = [SELECT Id FROM OpportunityContactRole WHERE OpportunityId = :cloneOpp.Id];

        System.assertEquals(attachList.size(), 1);
        System.assertEquals(tankkartenList.size(), 1);
        System.assertEquals(oppConRoleLost.size(), 1);
    }

    /*******************************************************************************
    *  Name            : testupdateCurrencyIsoCode()
    *  Summary         : test updating CurrencyIsoCode
    *  CreatedDate     : 03.03.2018
    *  ModifiedDate    : -
    *  Parameters      : -
    *  Returns         : void
    ******************************************************************************/
    @isTest
    private static void testupdateCurrencyIsoCode() {
        Lead testLead = new Lead(
            Salutation = 'Herr',
            LastName = 'test lead',
            Company = 'test company',
            Status = 'Open',
            Quali_Status__c = '',
            Country = 'Germany',
            Disable_for_Processing_Time__c = FALSE,
            Branche_NACE__c = 'Bauinstallation - 4320',
            INN__c = '12345',
            Anzahl_der_Fahrzeuge__c = 2,
            Phone = '7777777',
            Email = 'test@test.com'
        );
        insert testLead;

        Database.LeadConvert lc = new Database.LeadConvert();
        lc.setLeadId(testLead.id);

        LeadStatus convertStatus = [SELECT Id, MasterLabel FROM LeadStatus WHERE IsConverted = true LIMIT 1];
        lc.setConvertedStatus(convertStatus.MasterLabel);

        Database.LeadConvertResult lcr = Database.convertLead(lc);
        System.assert(lcr.isSuccess());

        List<Opportunity> opptyList = [SELECT CurrencyIsoCode, Name FROM Opportunity WHERE Name = 'test company' LIMIT 1];
        System.assertEquals('EUR', opptyList.get(0).CurrencyIsoCode);

        Account account = new Account(
            Name = 'testt',
            BillingCountry = 'Poland'
        );
        insert account;

        opptyList.get(0).AccountId = account.Id;
        update opptyList;

        List<Opportunity> opptyUpdateList = [SELECT CurrencyIsoCode, Name FROM Opportunity WHERE Name = 'test company' LIMIT 1];
        System.assertEquals('PLN', opptyUpdateList.get(0).CurrencyIsoCode);
    }

    /*******************************************************************************
    *  Name            : testupdateOppShellAZSone()
    *  Summary         : test updating AZS shell
    *  CreatedDate     : 05.03.2018
    *  ModifiedDate    : -
    *  Parameters      : -
    *  Returns         : void
    ******************************************************************************/
    @isTest
    public static void testupdateOppShellAZSone() {
        ShellTerminalAZS__c shellTerminal = new ShellTerminalAZS__c(Name = '11002', TerminalList__c = '2005/1805');
        insert shellTerminal;

        Account account = new Account(Name = 'testt',INN__c='123531215');
        insert account;

        Id recordTypeId;
        if (Schema.SObjectType.Opportunity.getRecordTypeInfosByName().get('Российские продажи') != null) {
            recordTypeId = Schema.SObjectType.Opportunity.getRecordTypeInfosByName().get(
                    'Российские продажи').getRecordTypeId();
        } else if (Schema.SObjectType.Opportunity.getRecordTypeInfosByName().get('Russian Sales') != null) {
            recordTypeId =
                    Schema.SObjectType.Opportunity.getRecordTypeInfosByName().get('Russian Sales').getRecordTypeId();
        }

        Opportunity opp = new Opportunity(
                Name = 'testt',
                AccountId = account.Id,
                StageName = 'Qualified Lead',
                CloseDate = Date.today() - 1,
                Angebotsdauer__c = '3 months',
                RecordTypeId = recordTypeId,
                Source_of_Lead_o__c = 'Сайт petrolplus.ru',
                PPR_AZS_Retailer__c =  shellTerminal.name
        );
        insert opp;

        List<Opportunity> testList = [
                SELECT id, AZS_with_Discount_1_address__c,PPR_AZS_Retailer__c
                FROM Opportunity
                WHERE Id = :opp.Id];

        system.debug(testList.get(0).AZS_with_Discount_1_address__c +' '+ testList.get(0).PPR_AZS_Retailer__c );
        system.assert(testList.get(0).AZS_with_Discount_1_address__c != null);
    }

    /*******************************************************************************
    *  Name            : testAddErrorForCredit()
    *  Summary         : test work of the method
    *  CreatedDate     : 05.03.2018
    *  ModifiedDate    : -
    *  Parameters      : -
    *  Returns         : void
    ******************************************************************************/
    @isTest
    private static void testAddErrorForCredit() {
        Test.startTest();

        Profile p = [SELECT Id FROM Profile WHERE Name = 'Credit'];
        UserRole ur = [SELECT Id FROM UserRole WHERE Name = 'Credit'];
        User u = new User (
            UserRoleId = ur.Id,
            ProfileId = p.Id,
            Username = System.now().millisecond() + '_233121_test1@test.com',
            Alias = 'teamlead',
            Email = 'test_1233@test.com',
            EmailEncodingKey = 'UTF-8',
            Firstname = 'testName',
            Lastname = 'testFamily',
            LanguageLocaleKey = 'en_US',
            LocaleSidKey = 'en_US',
            TimeZoneSidKey = 'America/Chicago'
        );
        Database.insert(u);

        System.runAs(u) {
            Account account = new Account(Name ='Test');
            insert account;

            Contact contact = new Contact(
                Salutation = 'Herr',
                LastName = 'Test',
                AccountId = account.Id,
                Email = 'test123123@gmail.com'
            );
            insert contact;

            List<RecordType> rtList = [SELECT Id FROM RecordType WHERE Name = 'Euroshell' AND SobjectType = 'Opportunity' LIMIT 1];

            Opportunity opportunity = new Opportunity(
                Name = 'Test',
                StageName = 'Prospecting',
                AccountID = account.Id,
                Kredit_Entscheidung__c = 'Abgelehnt',
                Angaben_korrekt__c = 'BIC stimmt nicht',
                CloseDate = date.today().addMonths(1),
                Product__c = 'Home Station offer (v.1)',
                Angebotsdauer__c = '3 Monate',
                RecordTypeId = rtList.get(0).Id
            );
            insert opportunity;

            OpportunityContactRole ocr = new OpportunityContactRole(
                ContactId = contact.Id,
                OpportunityId = opportunity.Id,
                IsPrimary = true,
                Role = 'Business User'
            );
            insert ocr;

            opportunity.Kredit_Entscheidung__c = 'Genehmigt';
            opportunity.Angaben_korrekt__c = 'Ja';
            opportunity.StageName = 'Closed Won';
            update opportunity;
        }
        Test.stopTest();

        List<Opportunity> oppList = [SELECT StageName FROM Opportunity LIMIT 1];
        System.assertEquals('Closed Won', oppList.get(0).StageName);
    }


    /*******************************************************************************
    *  Name            : testSetCloseDate()
    *  Summary         : Test update Closed Date when Stage is changed to "Closed Won" or "Closed Lost"
    *  CreatedDate     : 08/05/2018
    *  ModifiedDate    : -
    *  Parameters      : -
    *  Returns         : void
    ******************************************************************************/
    @isTest
    public static void testSetCloseDate() {
        Account account = new Account(
            Name = 'test');
        insert account;

        Opportunity opportunity = new Opportunity(
            AccountId = account.Id,
            Name = 'test',
            StageName = 'Prospecting',
            CloseDate = Date.today().addDays(-1),
            Angebotsdauer__c = '3 Monate',
            Send_SEPA_approval_link__c = true);
        insert opportunity;

        opportunity.StageName = 'Closed Won';

        Test.startTest();
            update opportunity;
        Test.stopTest();

        List<Opportunity> opportunitiesList = [
                SELECT CloseDate
                FROM Opportunity
                WHERE Id = :opportunity.Id];

        System.assertEquals(opportunitiesList.get(0).CloseDate, Date.today());
    }


    /*******************************************************************************
    *  Name            : testUpdateOpenTaskCheckbox()
    *  Summary         : test updateOpenTaskCheckbox method
    *  CreatedDate     : 07/05/2018
    *  ModifiedDate    : -
    *  Parameters      : -
    *  Returns         : void
    ******************************************************************************/
    @isTest
    static void testUpdateOpenTaskCheckbox() {
        Account account = new Account(Name = 'testt', INN__c = '123531215');
        insert account;

        List<RecordType> rtList = [SELECT Id FROM RecordType WHERE Name = 'Euroshell' AND SobjectType = 'Opportunity' LIMIT 1];
        String taskRecId = GlobalUtils.returnRecordTypeId('Task', 'Layout Tasks');

        Opportunity opportunity = new Opportunity(
                Name = 'Test',
                StageName = 'Prospecting',
                AccountID = account.Id,
                Kredit_Entscheidung__c = 'Abgelehnt',
                Angaben_korrekt__c = 'BIC stimmt nicht',
                CloseDate = date.today().addMonths(1),
                Product__c = 'Home Station offer (v.1)',
                Angebotsdauer__c = '3 Monate',
                RecordTypeId = rtList.get(0).Id
        );
        insert opportunity;

        User user = [SELECT Id FROM User WHERE Id != :opportunity.OwnerId LIMIT 1];

        Task testTask = new Task(
                Status = 'In Bearbeitung',
                Type = 'Anruf',
                ActivityDate = Date.today(),
                Subject = 'test',
                WhatId = opportunity.Id,
                OwnerId = user.Id,
                RecordTypeId = taskRecId);
        insert testTask;

        opportunity.OwnerId = user.Id;

        update opportunity;

        Opportunity resOpportunity = [SELECT Id, Open_Task__c FROM Opportunity WHERE Id = :opportunity.Id];

        System.assertEquals(true, resOpportunity.Open_Task__c);
    }


    /*******************************************************************************
    *  Name            : testClosingSignedOpportunity()
    *  Summary         : Test closing of Opportunity when DocuSign_Status__c is set to completed
    *  CreatedDate     : 31/05/2018
    *  ModifiedDate    : -
    *  Parameters      : -
    *  Returns         : void
    ******************************************************************************/
    @isTest
    private static void testClosingSignedOpportunity() {
        Account account = new Account(
            Name = 'test');
        insert account;

        Opportunity opportunity = new Opportunity(
            AccountId = account.Id,
            Name = 'test',
            StageName = 'Pending Credit - Contract Check',
            CloseDate = Date.today(),
            Angebotsdauer__c = '3 Monate');
        insert opportunity;

        opportunity.DocuSign_Status__c = 'Completed';

        Test.startTest();
            update opportunity;
        Test.stopTest();

        List<Opportunity> opportunitiesList = [
                SELECT StageName, CF_Stage__c
                FROM Opportunity
                WHERE Id = :opportunity.Id];

        System.assertEquals('Closed Won', opportunitiesList.get(0).StageName);
        System.assertEquals('Auto CW', opportunitiesList.get(0).CF_Stage__c);
    }

    /*******************************************************************************
    *  Name            : updateOpportunityAZSShellOneTwo()
    *  Summary         : test updating AZS shell address and terminal
    *  CreatedDate     : 05.06.2018
    *  ModifiedDate    : -
    *  Parameters      : -
    *  Returns         : void
    ******************************************************************************/
    @isTest
    public static void updateOpportunityAZSShellOneTwo() {
        ShellTerminalAZS__c shellTerminal_1 = new ShellTerminalAZS__c(Name = '11002',   TerminalList__c = '2005/1805');
        insert shellTerminal_1;

        ShellTerminalAZS__c shellTerminal_2 = new ShellTerminalAZS__c(Name = '11003',   TerminalList__c = '2006/1806');
        insert shellTerminal_2;

        Account account = new Account(Name = 'testt',INN__c='123531215');
        insert account;

        Id recordTypeId;
        if (Schema.SObjectType.Opportunity.getRecordTypeInfosByName().get('Российские продажи') != null) {
            recordTypeId = Schema.SObjectType.Opportunity.getRecordTypeInfosByName().get(
                    'Российские продажи').getRecordTypeId();
        } else if (Schema.SObjectType.Opportunity.getRecordTypeInfosByName().get('Russian Sales') != null) {
            recordTypeId =
                    Schema.SObjectType.Opportunity.getRecordTypeInfosByName().get('Russian Sales').getRecordTypeId();
        }

        Opportunity opp = new Opportunity(
                Name = 'testt',
                AccountId = account.Id,
                StageName = 'Qualified Lead',
                CloseDate = Date.today() - 1,
                Angebotsdauer__c = '3 months',
                RecordTypeId = recordTypeId,
                Source_of_Lead_o__c = 'Сайт petrolplus.ru',
                PPR_AZS_Retailer__c =  shellTerminal_1.name,
                AZS_with_Discount_2_address__c = shellTerminal_1.name
        );
        insert opp;

        opp.AZS_with_Discount_1_address__c = shellTerminal_2.name;
        opp.AZS_with_Discount_2_address__c = shellTerminal_2.name;
        update opp;

        List<Opportunity> testList = ([
                SELECT id, AZS_with_Discount_1__c, AZS_with_Discount_2__c
                FROM Opportunity
                WHERE Id = :opp.Id
        ]);

        List<ShellTerminalAZS__c> newShellTerminalAZS = ([
                SELECT name, TerminalList__c
                FROM  ShellTerminalAZS__c
                WHERE name = :shellTerminal_2.name
        ]);

        system.assertEquals(testList.get(0).AZS_with_Discount_1__c, newShellTerminalAZS.get(0).TerminalList__c );
        system.assertEquals(testList.get(0).AZS_with_Discount_2__c, newShellTerminalAZS.get(0).TerminalList__c );
    }


    /*******************************************************************************
    *  Name            : updateE2EFieldsTest()
    *  Summary         : test updateE2EFields method
    *  CreatedDate     : 17/07/2018
    *  ModifiedDate    : -
    *  Parameters      : -
    *  Returns         : void
    ******************************************************************************/
    @isTest
    static void updateE2EFieldsTest() {
        Account account = new Account(Name = 'test');
        insert account;

        List<RecordType> recordTypeList = [SELECT Id FROM RecordType WHERE Name = 'Euroshell' AND SobjectType = 'Opportunity' LIMIT 1];
        Opportunity opportunity = new Opportunity(
            Name = 'Test',
            StageName = 'Prospecting',
            AccountID = account.Id,
            LeadSource = 'ABVP',
            RecordTypeId = recordTypeList.get(0).Id,
            CloseDate = date.today()
        );
        insert opportunity;

        Opportunity opportunity2 = new Opportunity(
            Name = 'Test',
            StageName = 'Prospecting',
            AccountID = account.Id,
            RecordTypeId = recordTypeList.get(0).Id,
            CloseDate = date.today(),
            E2E__c = true,
            E2E_Sales_Type__c = 'E2E downgraded to manual'
        );
        insert opportunity2;

        List<Opportunity> opportunityList = [SELECT E2E_Status__c, E2E_Sales_Type__c FROM Opportunity WHERE Id = :opportunity.Id];
        System.assertEquals('In progress', opportunityList.get(0).E2E_Status__c);
        System.assertEquals('Fully manual', opportunityList.get(0).E2E_Sales_Type__c);

        opportunity.StageName = 'Closed Lost';
        update opportunity;

        List<Opportunity> opportunityBeforeUpdateList = [SELECT E2E_Status__c FROM Opportunity WHERE Id = :opportunity.Id];
        System.assertEquals('Finished', opportunityBeforeUpdateList.get(0).E2E_Status__c);

        opportunity2.StageName = 'Closed Lost';
        update opportunity2;

        List<Opportunity> opportunityBeforeUpdateList2 = [SELECT E2E_Status__c, E2E_Sales_Type__c FROM Opportunity WHERE Id = :opportunity2.Id];
        System.assertEquals('Finished', opportunityBeforeUpdateList2.get(0).E2E_Status__c);
        System.assertEquals('E2E downgraded to manual', opportunityBeforeUpdateList2.get(0).E2E_Sales_Type__c);
    }


    /*******************************************************************************
    *  Name            : testUpdateFieldsForVatRecovery()
    *  Summary         : test Update required for vat recovery fields or display an error if they are empty 
    *  CreatedDate     : 25/12/2018
    *  ModifiedDate    : -
    *  Parameters      : -
    *  Returns         : void
    ******************************************************************************/
    @isTest
    static void testUpdateFieldsForVatRecovery() {
        Account account = new Account(
            Name = 'test',
            BillingCountry = 'Poland',
            Gesellschaftsform__c = 'Einzelfirma');
        insert account;

        List<RecordType> recordTypeList = [SELECT Id FROM RecordType WHERE Name = 'Euroshell' AND SobjectType = 'Opportunity' LIMIT 1];

        Opportunity opportunity = new Opportunity(
            Name = 'Test',
            StageName = 'Prospecting',
            AccountId = account.Id,
            RecordTypeId = recordTypeList.get(0).Id,
            CloseDate = date.today(),
            VAT_Recovery__c = true
        );
        insert opportunity;

        Contact contact = new Contact(
            LastName = 'test',
            Birthdate = Date.newInstance(1986, 21, 10));
        insert contact;

        OpportunityContactRole role = new OpportunityContactRole(
            OpportunityId = opportunity.Id,
            ContactId = contact.Id,
            IsPrimary = true);
        insert role;

        List<Tankkarten__c> cardsList = new List<Tankkarten__c>();
        Tankkarten__c card1 = new Tankkarten__c(
            Opportunity__c = opportunity.Id,
            KFZ_Kennzeichen_oder_Fahrername__c = 'test',
            Fahrzeugtyp__c = 'LKW');
        cardsList.add(card1);
        Tankkarten__c card2 = new Tankkarten__c(
            Opportunity__c = opportunity.Id,
            KFZ_Kennzeichen_oder_Fahrername__c = 'test',
            Fahrzeugtyp__c = 'LKW');
        cardsList.add(card2);
        insert cardsList;

        Test.startTest();
            opportunity.StageName = 'Closed Won';
            update opportunity;
        Test.stopTest();

        List<Opportunity> testOpportunitiesList = [
                SELECT Primary_Contact_Birthdate__c, Fleet_type_VAT_recovery__c
                FROM Opportunity
                WHERE Id = :opportunity.Id];
        System.assertEquals(Date.newInstance(1986, 21, 10), testOpportunitiesList.get(0).Primary_Contact_Birthdate__c);
        System.assertEquals('CRT', testOpportunitiesList.get(0).Fleet_type_VAT_recovery__c);
    }
}